# ------------------------------------------------------------
# CodeAnalyser
# - Evaluates PMD results against thresholds (and optional baseline)
# - When regression/threshold breach and PMD_Stop=1, builds $PMD_CANCEL_HTML
# - Ensures "REQUEST ID" renders as "No Deployment" if deployment never started
#
# Expects (by convention; already present elsewhere in your script):
#   PMD_CURRENT_CSV      : Current PMD consolidated CSV (e.g., Original_Combined_PMD_Report.csv)
#   PMD_BASELINE_CSV     : (optional) Baseline PMD CSV to diff against
#   PMD_CANCEL_HTML      : Path to write the Cancel/Stopped run HTML
#   HTMLLog              : (optional) main HTML log to append to (not required for cancel page)
#   SFDC_ORG             : Org name (string)
#   mutt_MAIL_LIST       : (optional) Notification list
#   property             : (optional) base folder that may contain ui_colors.jsonc
#   PMD_Stop             : "1" to enforce stop on regression/threshold breach; else "0"
#   _REPO _BRANCH _REQID _RUN_IST _ORG_API _DEPUSER : Run details (any may be empty)
#
# Config via JSONC (optional; all have sensible defaults if absent):
#   ui_colors.jsonc:
#   {
#     // visual
#     "bars": { "background": "#a94442", "text": "#ffffff" },
#     "cards": { "border": "#e5e7eb", "titleText": "#111827", "bodyText": "#111827" },
#     "chips": { "border": "#d1d5db", "bg": "#f9fafb", "text": "#111827" },
#     "fonts": { "base": "12px/1.5 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif" },
#     // PMD thresholds (fail if >)
#     "pmd": { "thresholds": { "CRITICAL": 0, "MAJOR": 0, "MINOR": 999999, "INFO": 999999 } }
#   }
# ------------------------------------------------------------
CodeAnalyser() {
  # ---------- helpers ----------
  _warn(){ echo "[WARN] $*" >&2; }
  _fatal(){
    echo "[FATAL] $*"
    if [[ -n "${mutt_MAIL_LIST:-}" && -n "${SFDC_ORG:-}" ]]; then
      printf "%s\n" "[FATAL] $*" | mutt -s "---${SFDC_ORG}--- CodeAnalyser Error" "${mutt_MAIL_LIST}" 2>/dev/null || true
    fi
    return 1
  }
  _esc(){ sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'; }
  _jsonc_to_json(){ sed -E 's@//.*$@@; s@/\*[^*]*\*+([^/*][^*]*\*+)*/@@g'; } # strip // and /* */ comments

  # ---------- inputs / defaults ----------
  local _PMD_CUR="${PMD_CURRENT_CSV:-Original_Combined_PMD_Report.csv}"
  local _PMD_BASE="${PMD_BASELINE_CSV:-}"            # optional
  local _CANCEL_HTML="${PMD_CANCEL_HTML:-/tmp/pmd_cancel.$$.html}"
  local _UI_JSONC="${property:+${property}/ui_colors.jsonc}"
  _UI_JSONC="${_UI_JSONC:-ui_colors.jsonc}"

  local _PMD_STOP="${PMD_Stop:-1}"                   # default: enforce stopping
  local REGRESSION_FOUND=0

  # Run details (any may be empty; we will derive safe fallbacks)
  local _REPO="${_REPO:-${GIT_REPO:-}}"
  local _BRANCH="${_BRANCH:-${GIT_BRANCH:-}}"
  local _REQID="${_REQID:-}"                         # may be empty if no deploy kicked
  local _RUN_IST="${_RUN_IST:-$(date +'%Y-%m-%d %H:%M:%S %Z')}"
  local _ORG_API="${_ORG_API:-${SFDC_ORG:-}}"
  local _DEPUSER="${_DEPUSER:-${USER:-unknown}}"

  # ---------- sanity checks ----------
  command -v awk >/dev/null 2>&1 || return 0  # do not hard fail; be soft
  command -v jq  >/dev/null 2>&1 || _warn "jq not found; using UI defaults and simple PMD checks."

  [[ -f "${_PMD_CUR}" ]] || _fatal "PMD CSV not found: ${_PMD_CUR}"

  # ---------- load UI config (with graceful fallbacks) ----------
  local _BAR_BG="#a94442" _BAR_TXT="#ffffff"
  local _CARD_BORDER="#e5e7eb" _TITLE_TXT="#111827" _BODY_TXT="#111827"
  local _CHIP_BG="#f9fafb" _CHIP_TXT="#111827" _CHIP_BORDER="#d1d5db"
  local _FONT_BASE="font: 12px/1.5 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif; color: ${_BODY_TXT};"

  local _TH_CRIT=0 _TH_MAJ=0 _TH_MIN=999999 _TH_INF=999999

  if [[ -f "${_UI_JSONC}" ]] && command -v jq >/dev/null 2>&1; then
    local _UI_JSON
    _UI_JSON="$(cat "${_UI_JSONC}" | _jsonc_to_json)"
    # colors
    _BAR_BG="$(jq -r '.bars.background // empty' <<<"${_UI_JSON}")" || true
    _BAR_TXT="$(jq -r '.bars.text // empty'       <<<"${_UI_JSON}")" || true
    _CARD_BORDER="$(jq -r '.cards.border // empty'     <<<"${_UI_JSON}")" || true
    _TITLE_TXT="$(jq -r '.cards.titleText // empty'    <<<"${_UI_JSON}")" || true
    _BODY_TXT="$(jq -r '.cards.bodyText // empty'      <<<"${_UI_JSON}")" || true
    _CHIP_BG="$(jq -r '.chips.bg // empty'             <<<"${_UI_JSON}")" || true
    _CHIP_TXT="$(jq -r '.chips.text // empty'          <<<"${_UI_JSON}")" || true
    _CHIP_BORDER="$(jq -r '.chips.border // empty'     <<<"${_UI_JSON}")" || true
    # font
    local _FONT_SPEC
    _FONT_SPEC="$(jq -r '.fonts.base // empty' <<<"${_UI_JSON}")" || true
    [[ -n "${_FONT_SPEC}" ]] && _FONT_BASE="font: ${_FONT_SPEC}; color: ${_BODY_TXT};"
    # thresholds
    _TH_CRIT="$(jq -r '.pmd.thresholds.CRITICAL // empty' <<<"${_UI_JSON}")" || true
    _TH_MAJ="$(jq -r '.pmd.thresholds.MAJOR // empty'    <<<"${_UI_JSON}")" || true
    _TH_MIN="$(jq -r '.pmd.thresholds.MINOR // empty'    <<<"${_UI_JSON}")" || true
    _TH_INF="$(jq -r '.pmd.thresholds.INFO // empty'     <<<"${_UI_JSON}")" || true
    # set defaults if any empty
    _TH_CRIT="${_TH_CRIT:-0}"; _TH_MAJ="${_TH_MAJ:-0}"
    _TH_MIN="${_TH_MIN:-999999}"; _TH_INF="${_TH_INF:-999999}"
  fi

  # ---------- parse PMD CSV → counts by severity ----------
  # Accept headers in any order; we just search "severity" column (case-insensitive).
  # If no header present, assume column 2 = severity.
  local _hdr _sev_idx=2
  _hdr="$(head -n1 "${_PMD_CUR}")"
  if grep -qi "severity" <<<"${_hdr}"; then
    # find the column index (1-based)
    _sev_idx="$(awk -F',' '
      NR==1 {
        for (i=1;i<=NF;i++){
          f=tolower($i); gsub(/^[ \t"]+|[ \t"]+$/,"",f);
          if (f ~ /severity/) { print i; exit }
        }
      }' "${_PMD_CUR}")"
    [[ -z "${_sev_idx}" ]] && _sev_idx=2
  fi

  # counts
  local C_CRIT=0 C_MAJ=0 C_MIN=0 C_INF=0
  # shellcheck disable=SC2013
  while IFS= read -r line; do
    # skip header
    if [[ $line == "$_hdr" ]]; then continue; fi
    # naive CSV split (good enough for PMD export; fields rarely contain bare commas)
    local s
    s="$(awk -v idx="${_sev_idx}" -F',' '{print $idx}' <<<"$line" | tr -d '"' | tr '[:lower:]' '[:upper:]')"
    case "${s}" in
      *CRIT*)  : $((C_CRIT+=1));;
      *MAJ*)   : $((C_MAJ+=1));;
      *MIN*)   : $((C_MIN+=1));;
      *INFO*|*LOW*)  : $((C_INF+=1));;
      *) : ;;
    esac
  done < <(cat "${_PMD_CUR}")

  # ---------- optional: compare with baseline to detect regression ----------
  if [[ -n "${_PMD_BASE}" && -f "${_PMD_BASE}" ]]; then
    local B_CRIT=0 B_MAJ=0 B_MIN=0 B_INF=0
    local b_hdr b_sev_idx=2
    b_hdr="$(head -n1 "${_PMD_BASE}")"
    if grep -qi "severity" <<<"${b_hdr}"; then
      b_sev_idx="$(awk -F',' '
        NR==1 { for (i=1;i<=NF;i++){ f=tolower($i); gsub(/^[ \t"]+|[ \t"]+$/,"",f); if (f ~ /severity/) { print i; exit } }
      }' "${_PMD_BASE}")"
      [[ -z "${b_sev_idx}" ]] && b_sev_idx=2
    fi
    while IFS= read -r line; do
      if [[ $line == "$b_hdr" ]]; then continue; fi
      local s
      s="$(awk -v idx="${b_sev_idx}" -F',' '{print $idx}' <<<"$line" | tr -d '"' | tr '[:lower:]' '[:upper:]')"
      case "${s}" in
        *CRIT*)  : $((B_CRIT+=1));;
        *MAJ*)   : $((B_MAJ+=1));;
        *MIN*)   : $((B_MIN+=1));;
        *INFO*|*LOW*)  : $((B_INF+=1));;
        *) : ;;
      esac
    done < <(cat "${_PMD_BASE}")

    # simple regression rule: any severity level count increased vs baseline
    if (( C_CRIT > B_CRIT || C_MAJ > B_MAJ || C_MIN > B_MIN || C_INF > B_INF )); then
      REGRESSION_FOUND=1
    fi
  fi

  # ---------- threshold check ----------
  # Fail if counts exceed configured thresholds
  if (( C_CRIT > _TH_CRIT || C_MAJ > _TH_MAJ || C_MIN > _TH_MIN || C_INF > _TH_INF )); then
    REGRESSION_FOUND=1
  fi

  # ---------- decide to cancel ----------
  local SHOULD_CANCEL=0
  if [[ "${_PMD_STOP}" == "1" && "${REGRESSION_FOUND}" -eq 1 ]]; then
    SHOULD_CANCEL=1
  fi

  # ---------- build cancel HTML if needed ----------
  if (( SHOULD_CANCEL == 1 )); then
    # REQUEST ID label logic (this is your requested change):
    # If we are canceling pre-deploy, always display "No Deployment".
    local _REQID_SHOW
    _REQID_SHOW="No Deployment"  # force label on cancel
    # If you want: keep "No Deployment" even when _REQID is non-empty because deploy never actually started.

    # Compose styles
    local _STYLE="
      body { ${_FONT_BASE} margin:0; background:#ffffff; }
      .bar   { background:${_BAR_BG}; color:${_BAR_TXT}; padding:10px 14px; font-weight:600; text-align:center; }
      .wrap  { padding:16px; }
      .card  { border:1px solid ${_CARD_BORDER}; border-radius:8px; margin:0 0 14px 0; overflow:hidden; }
      .ctitle{ background:${_CHIP_BG}; color:${_TITLE_TXT}; padding:8px 12px; font-weight:600; border-bottom:1px solid ${_CARD_BORDER}; }
      .cbody { padding:12px; color:${_BODY_TXT}; }
      .grid6 { display:grid; grid-template-columns:repeat(3,1fr); gap:10px; }
      .ibox  { border:1px solid ${_CHIP_BORDER}; border-radius:8px; padding:10px; }
      .ilab  { font-weight:600; margin:0 0 4px 0; color:${_TITLE_TXT}; }
      .ival  { margin:0; color:${_BODY_TXT}; }
      .chips { display:flex; flex-wrap:wrap; gap:8px; }
      .chip  { border:1px solid ${_CHIP_BORDER}; background:${_CHIP_BG}; color:${_CHIP_TXT};
               border-radius:999px; padding:6px 10px; font-weight:600; }
      @media (max-width:900px){ .grid6{ grid-template-columns:1fr; } }
    "

    # Write HTML
    : > "${_CANCEL_HTML}"
    {
      printf '<!doctype html><html><head><meta charset="utf-8"><title>PMD Review — Deployment Canceled</title>\n'
      printf '<meta name="viewport" content="width=device-width,initial-scale=1">\n'
      printf '<style>%s</style></head><body>\n' "${_STYLE}"
      printf '<div class="bar">PMD Review — Deployment Canceled</div>\n'
      printf '<div class="wrap">\n'

      # Run Details
      printf '  <div class="card">\n'
      printf '    <div class="ctitle">Run Details</div>\n'
      printf '    <div class="cbody">\n'
      printf '      <div class="grid6">\n'

      printf '        <div class="ibox"><div class="ilab">Repo</div><div class="ival">%s</div></div>\n'  "$(_esc <<<"${_REPO:-n/a}")"
      printf '        <div class="ibox"><div class="ilab">Branch</div><div class="ival">%s</div></div>\n' "$(_esc <<<"${_BRANCH:-n/a}")"
      printf '        <div class="ibox"><div class="ilab">Request ID</div><div class="ival">%s</div></div>\n' "$(_esc <<<"${_REQID_SHOW}")"
      printf '        <div class="ibox"><div class="ilab">Run (IST)</div><div class="ival">%s</div></div>\n' "$(_esc <<<"${_RUN_IST:-n/a}")"
      printf '        <div class="ibox"><div class="ilab">Org + API</div><div class="ival">%s</div></div>\n' "$(_esc <<<"${_ORG_API:-n/a}")"
      printf '        <div class="ibox"><div class="ilab">Deploy User</div><div class="ival">%s</div></div>\n' "$(_esc <<<"${_DEPUSER:-n/a}")"

      printf '      </div>\n'   # grid
      printf '    </div>\n'     # cbody
      printf '  </div>\n'       # card

      # PMD Summary
      printf '  <div class="card">\n'
      printf '    <div class="ctitle">PMD Summary</div>\n'
      printf '    <div class="cbody">\n'
      printf '      <div class="chips">\n'
      printf '        <div class="chip">CRITICAL: %d (threshold %d)</div>\n' "${C_CRIT}" "${_TH_CRIT}"
      printf '        <div class="chip">MAJOR: %d (threshold %d)</div>\n'    "${C_MAJ}"  "${_TH_MAJ}"
      printf '        <div class="chip">MINOR: %d (threshold %d)</div>\n'    "${C_MIN}"  "${_TH_MIN}"
      printf '        <div class="chip">INFO: %d (threshold %d)</div>\n'     "${C_INF}"  "${_TH_INF}"
      printf '      </div>\n'
      if [[ -n "${_PMD_BASE}" && -f "${_PMD_BASE}" ]]; then
        printf '      <p style="margin-top:10px;">Compared with baseline: %s</p>\n' "$(_esc <<<"${_PMD_BASE}")"
      fi
      printf '      <p style="margin-top:10px;">Deployment has been stopped due to PMD regression/threshold breach.</p>\n'
      printf '    </div>\n'
      printf '  </div>\n'

      printf '</div>\n' # wrap
      printf '</body></html>\n'
    } >> "${_CANCEL_HTML}"

    # Optional: mail out (respect your environment)
    if [[ -n "${mutt_MAIL_LIST:-}" ]]; then
      printf "%s\n" "PMD failure: deployment canceled. See attached HTML." \
        | mutt -s "---${SFDC_ORG:-ORG}--- PMD Regression: Deployment Canceled" \
               -a "${_CANCEL_HTML}" -- "${mutt_MAIL_LIST}" 2>/dev/null || true
    fi

    # Signal to callers that deployment must be skipped
    export PMD_REGRESSION="1"
    export DEPLOY_SHOULD_RUN="0"
    return 0
  fi

  # ---------- no cancel; continue ----------
  export PMD_REGRESSION="0"
  export DEPLOY_SHOULD_RUN="1"
  return 0
}
