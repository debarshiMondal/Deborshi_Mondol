HTML_REPORT() {
    Report=$1

    # UI-only counts (do not affect flow)
    classes_count=$(ls changeSetDeploy/force-app/main/default/classes/*.cls 2>/dev/null | wc -l)
    triggers_count=$(ls changeSetDeploy/force-app/main/default/triggers/*.trigger 2>/dev/null | wc -l)

    echo "<HTML>" > "$HTMLLog"
    echo "<BODY>" >> "$HTMLLog"

    # === UI layout & theme (CSS only; logic untouched) ===
    cat >> "$HTMLLog" <<'__CSS__'
<style>
  /* App look & feel */
  body { margin:0; background:#0f172a; font-family: Inter,system-ui,Arial,sans-serif; color:#0b1220; }
  .container { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
  h1, h2, h3 { color:#0b1220; }
  table { width:100%; border-collapse: separate; border-spacing: 0 12px; } /* vertical rhythm */

  /* Make legacy <td bgcolor=...> blocks look like cards */
  td[bgcolor], th[bgcolor] { 
    border-radius: 12px; 
    padding: 10px 12px; 
    box-shadow: 0 8px 24px rgba(2,6,23,0.06), 0 4px 8px rgba(2,6,23,0.05); 
    border: 1px solid rgba(2,6,23,0.08);
    background-clip: padding-box;
  }
  td[bgcolor="SeaShell"], td[bgcolor=SeaShell]         { background:#fff6df; border-color:#ffe3a1; font-weight:700; }
  td[bgcolor="LightGreen"], td[bgcolor=LightGreen]     { background:#e7f8ed; border-color:#b7e4c7; white-space:pre-wrap; }
  td[bgcolor="Khaki"], td[bgcolor=Khaki]               { background:#fff3cd; border-color:#ffecb5; white-space:pre-wrap; }
  td[bgcolor="Gainsboro"], td[bgcolor=Gainsboro]       { background:#f3f4f6; border-color:#e5e7eb; white-space:pre-wrap; }
  td[bgcolor="LightYellow"], td[bgcolor=LightYellow]   { background:#fff9db; border-color:#ffe8a1; white-space:pre-wrap; }
  td[bgcolor="LightBlue"], td[bgcolor=LightBlue]       { background:#e7f1ff; border-color:#cfe0ff; height:10px; }
  td[bgcolor="Yellow"], td[bgcolor=Yellow]             { background:#fff6c2; border-color:#ffe58a; height:10px; }
  td[bgcolor="Salmon"], td[bgcolor=Salmon]             { background:#ffe2e0; border-color:#ffc3c0; font-weight:700; }
  td[bgcolor="Lime"], td[bgcolor=Lime]                 { background:#eaffea; border-color:#b7efb7; }
  th[bgcolor="Cyan"], th[bgcolor=Cyan]                 { background:#e6fbff; border-color:#b8eef8; }

  pre, PRE { margin:0; overflow:auto; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }

  /* Blue curved “link button” look with underline + white text */
  .pill-link {
    background:#1f6feb;
    color:#fff;
    text-decoration: underline;
    padding:6px 12px;
    border-radius:14px;
    display:inline-block;
    font-weight:600;
    border:1px solid #174ea6;
    margin: 4px 8px 8px 0;
  }
  .pill-link:visited { color:#fff; }
  .pill-link:hover { filter: brightness(0.95); }

  /* Header band + summary line */
  .topbar {
    background:linear-gradient(135deg,#111827 0%, #1f2937 60%, #374151 100%);
    color:#f8fafc; border-radius:16px; padding:16px 18px; margin-bottom:16px;
    box-shadow: 0 16px 48px rgba(3,7,18,.35);
  }
  .topbar h2 { margin:0; color:#f8fafc; letter-spacing:.2px; }
  .summary { background:#0ea5e9; color:#001129; border-radius:10px; padding:8px 10px; display:inline-block; margin-top:10px; font-weight:700; }
  .summary .dim { opacity:.9; font-weight:600; }
  .white-card { background:#ffffff; border-radius:16px; padding:14px; box-shadow: 0 8px 30px rgba(2,6,23,.10); }
</style>
__CSS__

    # Begin layout wrapper + header (UI only)
    echo "<div class=\"container\">" >> "$HTMLLog"
    echo "<div class=\"topbar white-card\">" >> "$HTMLLog"
    echo "<h2>${SFDC_ORG} • ChangeSet Deploy ${Report}</h2>" >> "$HTMLLog"
    echo "<div class=\"summary\">Classes: ${classes_count} &nbsp;•&nbsp; Triggers: ${triggers_count} <span class=\"dim\">&nbsp;•&nbsp; API ${SetAPI}</span></div>" >> "$HTMLLog"
    echo "</div>" >> "$HTMLLog"

    echo "<table width=\"100%\">" >> "$HTMLLog"

    if [ "$Report" == "SUCCEEDED" ]; then
        echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} deployment succeeded report</td></tr></H3>" >> "$HTMLLog"
        echo "<H5><PRE><tr><td bgcolor=\"LightGreen\">$(egrep -A3 "Status: Succeeded" "$LOG" | sed 's/^/ /')</td></tr></PRE></H5>" >> "$HTMLLog"
    elif [ "$Report" == "FAILED" ]; then
        echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} deployment failure report</td></tr></H3>" >> "$HTMLLog"
        echo "<H5><PRE><tr><td bgcolor=\"Khaki\">$(egrep -A3 "Status: Failed" "$LOG" | sed 's/^/ /')</td></tr></PRE></H5>" >> "$HTMLLog"
    fi

    # Status note (UI only)
    if [ "$classes_count" -eq 0 ] && [ "$triggers_count" -eq 0 ]; then
        echo "<tr><td bgcolor=\"LightYellow\"><b>No PMD Report Generated</b> — no classes/triggers in the changeset.</td></tr>" >> "$HTMLLog"
    fi

    echo "<tr><td bgcolor=\"LightBlue\"></td></tr>" >> "$HTMLLog"
    echo "<tr><td>GIT Repo URL: $(git config --get remote.origin.url)</td></tr>" >> "$HTMLLog"
    echo "<tr><td>Current Branch: $(git rev-parse --abbrev-ref HEAD)</td></tr>" >> "$HTMLLog"
    echo "<tr><td bgcolor=\"Yellow\"></td></tr>" >> "$HTMLLog"

    # Styled links: keep both links AND the style we agreed
    echo "<tr><td>" >> "$HTMLLog"
    echo "<a class=\"pill-link\" href=\"https://cdnsfdc.cadence.com/SFDC_GIT_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}\">Log and changeset</a>" >> "$HTMLLog"
    echo "<a class=\"pill-link\" href=\"https://cdnsfdc.cadence.com/SFDC_GIT_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/$(basename ${HTMLFDLog}).${DATE}\">ForceDeploy</a>" >> "$HTMLLog"
    echo "</td></tr>" >> "$HTMLLog"

    echo "<tr><td>API used: ${SetAPI}</td></tr>" >> "$HTMLLog"

    # ----------------------- ORIGINAL LOGIC KEPT -----------------------
    if [ -f /tmp/CodeAnalysisReport.txt ]; then
        echo "<tr><td><br/>No PMD code review generated because classes or triggers do not exist in changeSet</td></tr>" >> "$HTMLLog"
    else
        echo "<tr><td bgcolor=\"Salmon\">PMD code review comments</td></tr>" >> "$HTMLLog"
        echo "<tr><td bgcolor=\"Lime\"><a href=\"https://cdnsfdc.cadence.com/PMDOUTPUT/${SFDC_ORG}\">Original PMD Report</a></td></tr>" >> "$HTMLLog"

        echo "<tr><td><table style=\"width:35%\" border=\"1\"><tr><th bgcolor=\"Cyan\">Class Name</th><th bgcolor=\"Cyan\">Original Warning Count - (High Severity Count) </th><th bgcolor=\"Cyan\">Current Warning Count - (High Severity Count) </th></tr>" >> "$HTMLLog"
        for classeName in $(ls changeSetDeploy/force-app/main/default/classes/*.cls 2>/dev/null); do
            classeNameMod=$(echo $classeName | sed 's/changeSetDeploy\/src\/classes\///g' | sed s/.cls/.cls_currpmd.html/)
            CurrseverityFile=$(echo ${classeNameMod} | sed s/.cls_currpmd.html/.cls_currpmd.txt/)
            OrgseverityFile=$(echo ${classeNameMod} | sed s/.cls_currpmd.html/.cls_orgpmd.txt/)
            OriginalPmd=$(grep "Original PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$classeNameMod | cut -d ":" -f 2)
            Currentpmd=$(grep "Current PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$classeNameMod | cut -d ":" -f 2)

            pattern="ApexUnitTestShouldNotUseSeeAllDataTrue:\|UnusedLocalVariable:\|ClassNamingConventions:\|FieldDeclarationsShouldBeAtStart:\|FieldNamingConventions:\|FormalParameterNamingConventions:\|LocalVariableNamingConventions:\|MethodNamingConventions:\|PropertyNamingConventions:\|ExcessiveClassLength:\|ExcessiveParameterList:\|ApexDoc:\|ApexCSRF:\|AvoidDirectAccessTriggerMap:\|AvoidHardcodingId:\|AvoidNonExistentAnnotations:\|EmptyCatchBlock:\|EmptyIfStmt:\|EmptyStatementBlock:\|EmptyTryOrFinallyBlock:\|EmptyWhileStmt:\|InaccessibleAuraEnabledGetter:\|MethodWithSameNameAsEnclosingClass:\|OverrideBothEqualsAndHashcode:\|TestMethodsMustBeInTestClasses:\|AvoidDmlStatementsInLoops:\|AvoidSoqlInLoops:\|AvoidSoslInLoops:\|OperationWithLimitsInLoop:\|ApexBadCrypto:\|ApexDangerousMethods:\|ApexInsecureEndpoint:\|ApexOpenRedirect:\|ApexSharingViolations:\|ApexSOQLInjection:\|ApexSuggestUsingNamedCred:"
            CurrseverityCnt=$(grep -o "$pattern" PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/classes/$CurrseverityFile 2>/dev/null | wc -l)
            OrgseverityCnt=$(grep -o "$pattern" PMDReport/orgpmdoutput/src/classes/$OrgseverityFile 2>/dev/null | wc -l)

            classeNameMod_mod=$(echo ${classeNameMod} | sed s/.cls_currpmd.html//)
            if [ $CurrseverityCnt -gt $OrgseverityCnt ]; then
                echo "<tr><th style=\"text-align:left\"><a href=\"https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$classeNameMod\">$classeNameMod_mod</a></th><th style=\"text-align:right\" bgcolor=\"Tomato\">${OriginalPmd}-($OrgseverityCnt)</th><th style=\"text-align:right\" bgcolor=\"Tomato\">${Currentpmd}-($CurrseverityCnt)</th></tr>" >> "$HTMLLog"
            else
                echo "<tr><th style=\"text-align:left\"><a href=\"https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$classeNameMod\">$classeNameMod_mod</a></th><th style=\"text-align:right\">${OriginalPmd}-($OrgseverityCnt)</th><th style=\"text-align:right\">${Currentpmd}-($CurrseverityCnt)</th></tr>" >> "$HTMLLog"
            fi
        done
        echo "</table></td></tr>" >> "$HTMLLog"

        echo "<tr><td><table style=\"width:35%\" border=\"1\"><tr><th bgcolor=\"Cyan\">Trigger Name</th><th bgcolor=\"Cyan\">Original Warning Count</th><th bgcolor=\"Cyan\">Current Warning Count</th></tr>" >> "$HTMLLog"
        for triggerName in $(ls changeSetDeploy/force-app/main/default/triggers/*.trigger 2>/dev/null); do
            triggerNameMod=$(echo $triggerName | sed 's/changeSetDeploy\/src\/triggers\///g' | sed s/.trigger/.trigger_currpmd.html/)
            OriginalPmd=$(grep "Original PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$triggerNameMod | cut -d ":" -f 2)
            Currentpmd=$(grep "Current PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$triggerNameMod | cut -d ":" -f 2)
            triggerNameMod_mod=$(echo ${triggerNameMod} | sed s/.trigger_currpmd.html//)
            echo "<tr><th style=\"text-align:left\"><a href=\"https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$triggerNameMod\">$triggerNameMod_mod</a></th><th style=\"text-align:right\">${OriginalPmd}</th><th style=\"text-align:right\">${Currentpmd}</th></tr>" >> "$HTMLLog"
        done
        echo "</table></td></tr>" >> "$HTMLLog"
    fi

    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")

    if [ "$Report" == "SUCCEEDED" ]; then
        find changeSetDeploy/force-app/main/default -type f | egrep -v "customSettings|staticResourceFolders.txt" | sed 's|^changeSetDeploy/force-app/main/default|src|' | sort -u > ${DEPLOYEDFILE}
        changesetFile=$(find changeSetDeploy/force-app/main/default -type f | egrep -v "customSettings|staticResourceFolders.txt" | wc -l)
        echo "<tr><td bgcolor=\"SeaShell\">Changeset file/s ...[${changesetFile}]</td></tr>" >> "$HTMLLog"

        NUM=1
        for FILE in $(cat ${DEPLOYEDFILE}); do
            if [ "$FILE" == "src/labels/CustomLabels.labels-meta.xml" ]; then
                FILE=src/env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml
            elif [ ! -z "$(echo $FILE | grep ^"customSettings")" ]; then
                FILE=$(echo "$FILE" | sed -e 's/^customSettings\///g')
            elif [[ "$FILE" =~ "src/remoteSiteSettings/" ]]; then
                FILE=$(echo "$FILE" | sed -e "s/^src/src\/env\/${SFDC_ORG}/g")
            elif [[ "$FILE" =~ "src/customMetadata/" ]]; then
                FILE=$(echo "$FILE" | sed -e "s/^src/src\/env\/${SFDC_ORG}/g")
            fi

            echo "<tr><td bgcolor=\"LightGreen\"><PRE>" >> "$HTMLLog"
            echo " [$((NUM++))] ${FILE}" >> "$HTMLLog"
            echo "</PRE></td></tr>" >> "$HTMLLog"
            LastAuthor=$(git log -1 "$FILE" 2>/dev/null | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g')
            echo "<tr><td bgcolor=\"Gainsboro\"><PRE>Last author... ${LastAuthor}</PRE></td></tr>" >> "$HTMLLog"
        done
        echo "</table>" >> "$HTMLLog"

    elif [ "$Report" == "FAILED" ]; then
        echo "<tr><td bgcolor=\"SeaShell\">All Component Failures:</td></tr>" >> "$HTMLLog"
        i=1
        for failure in $(jq -c '.result.details.componentFailures[]' "$LOG.filtered" 2>/dev/null); do
            fileName=$(echo "$failure" | jq -r '.fileName')
            errorMsg=$(echo "$failure" | jq -r '.problem')
            sanitizedErrorMsg=$(echo "$errorMsg" | tr '\n' ' ' | tr '\r' ' ' | sed -e 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
            echo "<tr><td bgcolor=\"Khaki\"><PRE>$i. $fileName -- Error: $sanitizedErrorMsg</PRE></td></tr>" >> "$HTMLLog"

            gitFile=$(find src -type f -iname "$(basename "$fileName")" | head -n 1)
            if [ -z "$gitFile" ]; then
                ext=$(echo "$fileName" | sed 's/.*\.//')
                knownPairs="cls page trigger component"
                if ! echo "$knownPairs" | grep -qw "$ext"; then
                    metaCandidate="$(basename "$fileName")-meta.xml"
                    fallbackFile=$(find src -type f -iname "$metaCandidate" | head -n 1)
                    if [ -n "$fallbackFile" ]; then gitFile="$fallbackFile"; fi
                fi
            fi

            echo "<tr><td bgcolor=\"Gainsboro\"><PRE>" >> "$HTMLLog"
            if [ -n "$gitFile" ]; then
                LastAuthor=$(git log -1 "$gitFile" 2>/dev/null | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g')
                echo "GIT log >>> $gitFile" >> "$HTMLLog"
                echo "$LastAuthor" >> "$HTMLLog"
            else
                echo "No Git log available for $fileName" >> "$HTMLLog"
            fi
            echo "</PRE></td></tr>" >> "$HTMLLog"

            i=$((i+1))
        done
        echo "</table>" >> "$HTMLLog"
    elif [ "$Report" == "LOCKED" ]; then
        echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} is Locked</td></tr></H3>" >> "$HTMLLog"
        echo "<H5><PRE><tr><td bgcolor=\"LightYellow\">$(grep ALREADY_IN_PROCESS "$LOG" | cut -d ":" -f 3-100)</td></tr></PRE></H5>" >> "$HTMLLog"
    elif [ "$Report" == "EXCEEDED_MAX_SIZE_REQUEST" ]; then
        echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} EXCEEDED_MAX_SIZE_REQUEST </td></tr></H3>" >> "$HTMLLog"
        echo "<H5><PRE><tr><td bgcolor=\"LightYellow\">$(grep EXCEEDED_MAX_SIZE_REQUEST "$LOG" | cut -d ":" -f 3-100)</td></tr></PRE></H5>" >> "$HTMLLog"
    elif [ "$Report" == "UNKNOWN_EXCEPTION" ]; then
        echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} UNKNOWN_EXCEPTION </td></tr></H3>" >> "$HTMLLog"
        echo "<H5><PRE><tr><td bgcolor=\"LightYellow\">$(grep UNKNOWN_EXCEPTION "$LOG" | cut -d ":" -f 3-100)</td></tr></PRE></H5>" >> "$HTMLLog"
    elif [ "$Report" == "Failed_to_send_request" ]; then
        echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} Failed to send request </td></tr></H3>" >> "$HTMLLog"
        echo "<H5><PRE><tr><td bgcolor=\"LightYellow\">$(grep Error "$LOG")</td></tr></PRE></H5>" >> "$HTMLLog"
    fi

    IFS=$SAVEIFS

    # close wrapper then finalize
    echo "</div>" >> "$HTMLLog"   # .container
    echo "</HTML></BODY>" >> "$HTMLLog"

    EMAIL=${FROM} mutt -e 'set content_type=text/html' \
      -s "---${SFDC_ORG}--- SF-CLI ChangeSet Deploy ${Report} [`TZ=IST date +%d.%b.%Y` IST - git ${gitlast}-${gitlatest} ]" "${mutt_MAIL_LIST}" < "$HTMLLog"
}
