#!/bin/bash
#set -xv
#jbakshi@cadence.com Jan'2018

#          Description
# -------------------------------------------------------------------#
#JIRA - https://jira.cadence.com/browse/SFDC-6974
#VERSION=0.1.0
#SUBJECT=This script validate changeset against SFDC ORG
USAGE=">>>>>  Usage: validation_git_sfcli.sh env (replace env with Sandbox or Production alias)   GitHash1 GitHash2 <<<<<<"
# -------------------------------------------------------------------#

main()
{

    Check_Lock      #check Lock & dependency
    Trap            #handle Ctrl-C
    Mail_Setup      #email setup
    Prepare_RunTest
    Validation
    Unlock
}

if [ $# == 0 ] || ([ $1 != prprdnov25 ] && [ $1 != prod ]&& [ $1 != dev2 ] && [ $1 != tst ] && [ $1 != sandbox ])
then
    echo -e "\n" $USAGE  "\n"
    exit 1;
fi

DATE=$(date +%d_%m_%Y_%Hh%Mm%Ss)
SFDC_ORG=$1
bin=build/script
property=build/property
buildProperty=${property}/build_${SFDC_ORG}.properties
serverProperty=${property}/${SFDC_ORG}.conf

gitlast=$2
gitlatest=$3

Logpath=build/log
mkdir -p "$Logpath"
LOCK=${Logpath}/${SFDC_ORG}.VALIDATION.LOCK
LOG=${Logpath}/${SFDC_ORG}.${DATE}.VALIDATION.LOG
FAILEDTC=${Logpath}/${SFDC_ORG}.${DATE}.FAILED_TC
GITLOG=${Logpath}/${SFDC_ORG}.${DATE}.GIT.VALIDATION.LOG
TCtxt=${Logpath}/${SFDC_ORG}.${DATE}.VALIDATION.txt
TCNAME=${Logpath}/${SFDC_ORG}.${DATE}.VALIDATION.List
GIT_LOG=${Logpath}/${SFDC_ORG}.${DATE}.SFDC_GIT.log
CHANGESETLOG=/tmp/$SFDC_ORG.Changeset.log

DEPLOYEDFILE=/tmp/${SFDC_ORG}.Deploy.file

API=$(grep APIver $serverProperty | cut -d'=' -f2)

REPORT_JSON=${Logpath}/${SFDC_ORG}.${DATE}.report.json
HTMLLog=/tmp/$SFDC_ORG.Validation.log.html
HTMLFDLog=${Logpath}/${SFDC_ORG}.forceDeploy.${DATE}.html

Check_Lock()
{
    ##check Lock ##
    if [ -f $LOCK ]
    then
        echo "Another Validation process is present for $SFDC_ORG ...exit"
        mail -s "Another Validation process is present for $SFDC_ORG"  ${MAIL_LIST} < /dev/null
        exit
    else
        touch $LOCK
    fi
}

Prepare_RunTest()
{
    rm -f $TCNAME
    rm -f ${TCtxt}

    dos2unix -n build/testClasses.txt ${TCtxt}

    cat $TCtxt | grep -v "#" | grep -v '^\s*$' | sort -u > $TCNAME

    for i in `cat $TCNAME`
    do
        cp src/classes/$i.* changeSetDeploy/src/classes/
    done

    mapfile -t TEST_CLASSES < "$TCNAME"
    TEST_FLAGS=()
    for cls in "${TEST_CLASSES[@]}"; do
        cls="${cls//$'\r'/}"
        cls="${cls##*( )}"
        cls="${cls%%*( )}"
        [[ -z "$cls" ]] && continue
        TEST_FLAGS+=(--tests "$cls")
    done
}

Mail_Setup()
{
    MAIL_TO=debarshi@cadence.com
    CC=$(grep email_cc ${serverProperty} | cut -d "=" -f2)
    TO=$(grep email_to ${serverProperty} | cut -d "=" -f2)
    FROM=$(grep email_from ${serverProperty} | cut -d "=" -f2)
    MAIL_LIST="-r $FROM -c $CC $TO"
    mutt_MAIL_LIST="$TO -c $CC"
    MAIL=$(grep send_email ${serverProperty} | cut -d "=" -f2)
    case ${MAIL} in
    0) MAIL_LIST=${MAIL_TO}
       mutt_MAIL_LIST=${MAIL_TO}
    ;;
    *)
    ;;
    esac
}

# ---------------- helpers: resolver + safe HTML escape + git-log collector ----------------

_esc(){ sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'; }

_clean_token(){
  local s="$*"
  s="${s#src/}"
  s="${s//  / }"
  s="$(echo "$s" | sed -E 's/[[:space:]]+/ /g' | sed -E 's/^ +| +$//g')"
  s="$(echo "$s" | sed -E 's#^(Class|Trigger|Apex|src|/)+[[:space:]]+##I')"
  echo "$s"
}

_resolve_files(){
  local token raw base
  raw="$*"
  token="$(_clean_token "$raw")"
  base="${token##*/}"
  base="${base%.cls}"
  base="${base%.trigger}"
  base="${base%.page}"
  base="${base%.component}"
  base="${base%-meta.xml}"

  mapfile -t matches < <(
    find src -type f \( -name "${base}*" -o -name "*${base}*" \) 2>/dev/null \
      | sed 's#//*#/#g' \
      | awk '{ print length, $0 }' | sort -n | cut -d" " -f2-
  )

  if [ "${#matches[@]}" -eq 0 ]; then
    for ext in cls trigger page component flexipage app permissionset workflow layout object profile tab remoteSite reportType labels-meta.xml; do
      mapfile -t matches < <(find src -type f -name "${base}.${ext}*" 2>/dev/null | awk '{ print length, $0 }' | sort -n | cut -d" " -f2-)
      [ "${#matches[@]}" -gt 0 ] && break
    done
  fi

  if [ "${#matches[@]}" -eq 0 ]; then
    mapfile -t matches < <(find src/flows -type f \( -name "${base}*.flow*" -o -name "*${base}*.flow*" \) 2>/dev/null \
        | awk '{ print length, $0 }' | sort -n | cut -d" " -f2-)
  fi

  if [ "${#matches[@]}" -eq 0 ] && { [ -d "src/objects/${base}" ] || [ -f "src/objects/${base}.object" ]; }; then
    mapfile -t matches < <(find "src/objects" -maxdepth 2 -type f \( -name "${base}.object" -o -path "src/objects/${base}/*" \) 2>/dev/null \
        | awk '{ print length, $0 }' | sort -n | cut -d" " -f2-)
  fi

  if [ "${#matches[@]}" -eq 0 ] && [[ "$base" =~ ^CustomLabels(\.labels)?$ ]]; then
    matches=("env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml")
  fi

  if [ "${#matches[@]}" -gt 0 ]; then
    printf '%s\n' "${matches[@]}"
  fi
}

_gitlog_for_component(){
  local token="$*"
  local resolved=()
  mapfile -t resolved < <(_resolve_files "$token")

  if [ "${#resolved[@]}" -eq 0 ]; then
    echo "Latest 2 GIT log >>> (not found): $token"
    echo "Hint: file may be generated/renamed or in a subfolder; searched by prefix and common metadata suffixes."
    return
  fi

  local shown=0
  for f in "${resolved[@]}"; do
    echo "Latest 2 GIT log >>> ${f}"
    if [ -f "$f" ]; then
      # quote-safe, single line per commit
      git --no-pager log -2 --date=short --pretty='format:%h %ad %an %s' -- "$f" \
        | sed 's/$/ |/' | paste -sd' ' -
    else
      echo "(exists-in-index? Could not read path: $f)"
    fi
    shown=$((shown+1))
    [ $shown -ge 3 ] && break
  done
}

# ------------------------------------------------------------------------------------------

Validation()
{
    sf project deploy validate \
        --source-dir changeSetDeploy \
        --test-level RunSpecifiedTests \
        "${TEST_FLAGS[@]}" \
        --target-org "$SFDC_ORG" \
        --wait 60 \
        --json > "${LOG}.initial.json" 2> "${LOG}.err"
    cat "${LOG}.err" > "$LOG"
    cat "${LOG}.initial.json" >> "$LOG"

    INITIAL_STATUS=$(jq -r '.status' "${LOG}.initial.json")
    if [ "$INITIAL_STATUS" == "0" ]; then
        cp "${LOG}.initial.json" "$REPORT_JSON"
        antReturnCode="DEPLOYMENT SUCCEEDED"
    else
        ERROR_NAME=$(jq -r '.name' "${LOG}.initial.json")
        if [ "$ERROR_NAME" == "FailedValidationError" ]; then
            DEPLOY_ID=$(jq -r '.data.deployId' "${LOG}.initial.json")
            if [ -z "$DEPLOY_ID" ]; then
                echo "[ERROR] No deploy ID found in initial output" | tee -a "$LOG"
                antReturnCode="Request Status: Failed"
            else
                # Fetch full report and poll if needed
                sf project deploy report --job-id "$DEPLOY_ID" --target-org "$SFDC_ORG" --json > "$REPORT_JSON" 2> "${LOG}.err"
                cat "${LOG}.err" >> "$LOG"

                MAX_POLLS=120
                POLL_COUNT=0
                while [ "$POLL_COUNT" -lt "$MAX_POLLS" ]; do
                    RESULT_STATUS=$(jq -r '.result.status' "$REPORT_JSON" 2>/dev/null)
                    [ "$RESULT_STATUS" != "InProgress" ] && break
                    sleep 30
                    ((POLL_COUNT++))
                    sf project deploy report --job-id "$DEPLOY_ID" --target-org "$SFDC_ORG" --json > "$REPORT_JSON" 2> "${LOG}.err"
                    cat "${LOG}.err" >> "$LOG"
                done

                if [ "$RESULT_STATUS" == "InProgress" ]; then
                    antReturnCode="Failed to obtain result from server within specified time"
                elif [ "$RESULT_STATUS" == "Failed" ]; then
                    antReturnCode="Request Status: Failed"
                elif [ "$RESULT_STATUS" == "Succeeded" ]; then
                    antReturnCode="DEPLOYMENT SUCCEEDED"
                else
                    antReturnCode="Request Status: Failed"
                fi
            fi
        elif jq -r '.message' "${LOG}.initial.json" | grep -iq "locked"; then
            antReturnCode="ALREADY_IN_PROCESS"
        else
            antReturnCode="Failed to obtain result from server within specified time"
        fi
    fi

    # Prepare filtered log (use $REPORT_JSON if available, else fallback)
    if [ -s "$REPORT_JSON" ]; then
        jq -r '.result.details | {componentFailures, runTestResult: {failures, codeCoverageWarnings}}' "$REPORT_JSON" > "${LOG}.filtered.json" || true
        jq -r 'to_entries | map("\(.key): \(.value)") | join("\n")' "${LOG}.filtered.json" > "${LOG}.filtered" || true
    else
        jq -r '.message // "No report.json available; see error log."' "${LOG}.initial.json" > "${LOG}.filtered" 2>/dev/null || echo "No JSON output captured." > "${LOG}.filtered"
    fi

    case $antReturnCode in
    "DEPLOYMENT SUCCEEDED")
        HTML_Report SUCCEEDED
        PublishLOG changeset
        ;;
    "ALREADY_IN_PROCESS")
        HTML_Report LOCKED
        PublishLOG changeset
        ;;
    "Request Status: Failed")
        HTML_Report FAILED
        PublishLOG changeset
        ;;
    "Failed to obtain result from server within specified time")
        HTML_Report FAILED
        PublishLOG changeset
        ;;
    esac
}

HTML_Report()
{
Report=$1

SAVEIFS=$IFS
IFS=$(echo -en "\n\b")

echo "<HTML>" > $HTMLLog
echo "<BODY>" >> $HTMLLog
echo "<table width=100%>" >> $HTMLLog

if [ "${Report}" == "SUCCEEDED" ]
then
    echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} Validation suceeded report</td></tr></H3>" >> $HTMLLog
    echo "<H5><PRE><tr><td bgcolor=\"LightGreen\">$(jq -r '.result | "Deploy ID: \(.id)\nStatus: \(.status)\nSuccess: \(.success)"' "$REPORT_JSON" 2>/dev/null | _esc)</td></tr></PRE></H5>" >> $HTMLLog
    echo "<tr><td bgcolor=\"LightBlue\"></tr></td>" >> $HTMLLog
    echo "<tr><td bgcolor=\"Yellow\"></tr></td>" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}\">Log and changeset</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${SFDC_ORG}.changesetList.${DATE}.html\">Changeset List</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${HTMLFDLog##*/}\">ForceDeploy</a>" >> $HTMLLog
    echo "<br/>API used: ${API}" >> $HTMLLog

Changeset_List
#CHNGSETLIST

elif [ "${Report}" == "FAILED" ]
then
    REQ_ID=$(jq -r '.result.id // "N/A"' "$REPORT_JSON" 2>/dev/null || echo "N/A")
    echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} Validation failure report</td></tr></H3>" >> $HTMLLog
    echo "<H5><tr><td bgcolor=\"Khaki\">Request ID: ${REQ_ID}</td></tr></H5>" >> $HTMLLog
    echo "<tr><td bgcolor=\"LightBlue\"></tr></td>" >> $HTMLLog
    echo "<tr><td bgcolor=\"Yellow\"></tr></td>" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}\">Log and changeset</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${SFDC_ORG}.changesetList.${DATE}.html\">Changeset List</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${HTMLFDLog##*/}\">ForceDeploy</a>" >> $HTMLLog
    echo "<br/>API used: ${API}" >> $HTMLLog

    # Process component failures
    if [ -s "$REPORT_JSON" ]; then
      jq -r '.result.details.componentFailures[] | [.fileName, .problem] | join(" -- ")' "$REPORT_JSON" > "${LOG}.component_failures" 2>/dev/null || true
    else
      : > "${LOG}.component_failures"
    fi

    for FILE in `awk -F ' -- ' '{print $1}' "${LOG}.component_failures" | uniq`
    do
        echo "<tr><td bgcolor=\"LightSalmon\"><PRE>" >> $HTMLLog
        grep "${FILE}" "${LOG}.component_failures" | _esc >> $HTMLLog
        echo "</PRE></td></tr>" >> $HTMLLog

        if [ "${FILE}" == "labels/CustomLabels.labels-meta.xml" ]; then
            FILE="env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml"
        elif [[ "${FILE}" =~ remoteSiteSettings/ ]]; then
            FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
        elif [[ "${FILE}" =~ src/customMetadata/ ]]; then
            FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
        fi

        echo "<tr><td bgcolor=\"Gainsboro\"><PRE>" >> $HTMLLog
        _gitlog_for_component "${FILE}" | _esc >> $HTMLLog
        echo "</PRE></td></tr>" >> $HTMLLog
    done

    # Test failures
    echo "<tr><td bgcolor=\"Yellow\"><H4>${SFDC_ORG} Test Class </H4></td></tr>" >> $HTMLLog

    if [ -s "$REPORT_JSON" ]; then
      jq -r '.result.details.runTestResult.failures[] | [.name, .methodName, .message, .stackTrace] | join("\t")' "$REPORT_JSON" > "${LOG}.test_failures" 2>/dev/null || : > "${LOG}.test_failures"
    else
      : > "${LOG}.test_failures"
    fi

    ErrorNo=$(wc -l < "${LOG}.test_failures" 2>/dev/null || echo 0)

    idx=1
    while IFS=$'\t' read -r CLASS METHOD MSG STACK; do
        echo "<tr><td bgcolor=\"LightYellow\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
        echo "${idx}. ${CLASS}.${METHOD}() -- Error: ${MSG}" | _esc >> ${HTMLLog}
        echo "StackTrace: ${STACK}" | _esc >> ${HTMLLog}
        echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

        echo "<tr><td bgcolor=\"Gainsboro\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
        _gitlog_for_component "${CLASS}" | _esc >> ${HTMLLog}
        echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

        ((idx++))
    done < "${LOG}.test_failures"

    # Code Coverage Warnings
    echo "<tr><td bgcolor=\"Yellow\"><H4>${SFDC_ORG} Code Coverage</H4></td></tr>" >> $HTMLLog

    if [ -s "$REPORT_JSON" ]; then
      jq -r '.result.details.runTestResult.codeCoverageWarnings[] | [.name, .message] | join("\t")' "$REPORT_JSON" > "${LOG}.code_coverage_warnings" 2>/dev/null || : > "${LOG}.code_coverage_warnings"
    else
      : > "${LOG}.code_coverage_warnings"
    fi

    CoverageNo=$(wc -l < "${LOG}.code_coverage_warnings" 2>/dev/null || echo 0)

    cov_idx=1
    while IFS=$'\t' read -r NAME MESSAGE; do
        echo "<tr><td bgcolor=\"LightSalmon\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
        echo "${cov_idx}. ${NAME} -- Warning: ${MESSAGE}" | _esc >> ${HTMLLog}
        echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

        echo "<tr><td bgcolor=\"Gainsboro\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
        _gitlog_for_component "${NAME}" | _esc >> ${HTMLLog}
        echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

        ((cov_idx++))
    done < "${LOG}.code_coverage_warnings"

Changeset_List
#CHNGSETLIST

elif [ "${Report}" == "LOCKED" ]
then
      echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} is Locked</td></tr></H3>" >> $HTMLLog
      echo "<H5><PRE><tr><td bgcolor=\"LightYellow\">$(jq -r '.result.details' "$REPORT_JSON" 2>/dev/null | grep -i locked | _esc)</td></tr></PRE></H5>" >> $HTMLLog

fi

echo "</table>" >> $HTMLLog
echo "</HTML></BODY>" >> $HTMLLog

    EMAIL=${FROM} mutt -e 'set content_type=text/html' \
    -s "---${SFDC_ORG}---ChangeSet Validation ${Report} [$(date +%d.%b.%Y) PST - git ${gitlast}-${gitlatest} ]" \
    ${mutt_MAIL_LIST}  -a $LOG.filtered  < $HTMLLog

IFS=$SAVEIFS

}

Changeset_List()
{
    #changeset file list
    find changeSetDeploy -type f | egrep -v "package.xml|staticResourceFolders.txt" | \
    cut -d "/" -f  1,2 --complement | sort -u > ${DEPLOYEDFILE}

    changesetFile=$(find changeSetDeploy -type f | egrep -v "package.xml|staticResourceFolders.txt" | wc -l)
    echo "<tr><td bgcolor=\"SeaShell\">Changeset file/s ... [${changesetFile}]</td></tr>" >> $HTMLLog

    NUM=1
    for FILE in `cat ${DEPLOYEDFILE}`
    do
      if [ "${FILE}" == "labels/CustomLabels.labels-meta.xml" ]; then
              FILE="env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml"
      elif [[ "${FILE}" =~ remoteSiteSettings/ ]]; then
              FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
      elif [[ "${FILE}" =~ src/customMetadata/ ]]; then
              FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
      fi

      echo "<tr><td bgcolor=\"Ivory\"><PRE>" >> $HTMLLog
      echo " [$((NUM++))] ${FILE}" | _esc >> ${HTMLLog}
      echo "</PRE></td></tr>" >> $HTMLLog

      LastAuthor="$(
        _resolve_files "${FILE}" | head -n1 | while read -r p; do
          if [ -f "$p" ]; then
            git --no-pager log -1 --date=short --pretty='format:%h %ad %an %s' -- "$p"
          fi
          break
        done
      )"

      echo "<tr><td bgcolor=\"Gainsboro\"><PRE>" >> $HTMLLog
      echo "Last author... ${LastAuthor}" | _esc >> $HTMLLog
      echo "</PRE></td></tr>" >> $HTMLLog
    done

    echo "</table>" >> $HTMLLog
}

CHNGSETLIST ()
{
ORGchngSet=${SFDC_ORG}.${DATE}.changeSetDeploy
ORGchngSetFILE=${Logpath}/${SFDC_ORG}.changesetList.${DATE}
cp -r changeSetDeploy  ${ORGchngSet}
if [ -d ${ORGchngSet}/src/staticresources ]
    then
    cd ${ORGchngSet}
    bash ${bin}/staticresource_decompress.sh
fi
cd -
find ${ORGchngSet}/customSettings/src/env/ ${ORGchngSet}/src/ -type f |\
egrep -v  "package.xml|staticResourceFolders.txt" |\
cut -d "/" -f3-20 | sort > ${ORGchngSetFILE}.csv
sed -e "s/$/<br><br>/ ;1 i<HTML>\n<BODY>" ${ORGchngSetFILE}.csv >  ${ORGchngSetFILE}.html
sed -i "\$a</BODY>\n</HTML>" ${ORGchngSetFILE}.html
}

PublishLOG()
{
        LogStorePath="/data/public/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}"
        mkdir -p ${LogStorePath}

        if [ "$1" == "changeset" ]
        then
                cp ${CHANGESETLOG} ${LogStorePath}/$SFDC_ORG.Changeset.log.${DATE}
                cp ${LOG} ${LogStorePath}/$SFDC_ORG.Deploy.log.${DATE}
                cp ${HTMLLog} ${LogStorePath}/${SFDC_ORG}.Deploy.log.${DATE}.html

                cp -r changeSetDeploy ${LogStorePath}/${SFDC_ORG}.changeSetDeploy.${DATE}
                cp ${ORGchngSetFILE}.html  ${ORGchngSetFILE}.csv ${LogStorePath}/ 2>/dev/null || true
                cp $REPORT_JSON ${LogStorePath}/ 2>/dev/null || true
        fi
}

Unlock()
{
    rm -f $LOCK
}

Trap()
{
        # trap keyboard interrupt (control-c)
        trap Unlock  SIGINT
}

FAIL_EXIT()
{
        ## process before exit #
        rm -f $LOCK
        exit
}

main "$@"
