#!/bin/bash
# jbakshi@cadence.com Jan'2018
# Description: Validate changeset against SFDC ORG + HTML report w/ git authors

USAGE=">>>>>  Usage: validation_git_sfcli.sh env (replace env with Sandbox or Production alias)   GitHash1 GitHash2 <<<<<<"

main() {
  Check_Lock      # check Lock & dependency
  Trap            # handle Ctrl-C
  Mail_Setup      # email setup
  Prepare_RunTest
  Validation
  Unlock
}

# --- arg check ---
if [ $# == 0 ] || ([ $1 != prprdnov25 ] && [ $1 != prod ] && [ $1 != dev2 ] && [ $1 != tst ] && [ $1 != sandbox ]); then
  echo -e "\n$USAGE\n"
  exit 1
fi

# --- globals ---
DATE=$(date +%d_%m_%Y_%Hh%Mm%Ss)
SFDC_ORG=$1
bin=build/script
property=build/property
buildProperty=${property}/build_${SFDC_ORG}.properties
serverProperty=${property}/${SFDC_ORG}.conf

gitlast=$2
gitlatest=$3

Logpath=build/log
mkdir -p "$Logpath"
LOCK=${Logpath}/${SFDC_ORG}.VALIDATION.LOCK
LOG=${Logpath}/${SFDC_ORG}.${DATE}.VALIDATION.LOG
FAILEDTC=${Logpath}/${SFDC_ORG}.${DATE}.FAILED_TC
GITLOG=${Logpath}/${SFDC_ORG}.${DATE}.GIT.VALIDATION.LOG
TCtxt=${Logpath}/${SFDC_ORG}.${DATE}.VALIDATION.txt
TCNAME=${Logpath}/${SFDC_ORG}.${DATE}.VALIDATION.List
GIT_LOG=${Logpath}/${SFDC_ORG}.${DATE}.SFDC_GIT.log
CHANGESETLOG=/tmp/$SFDC_ORG.Changeset.log

DEPLOYEDFILE=/tmp/${SFDC_ORG}.Deploy.file

API=$(grep APIver "$serverProperty" | cut -d'=' -f2)

REPORT_JSON=${Logpath}/${SFDC_ORG}.${DATE}.report.json
HTMLLog=/tmp/$SFDC_ORG.Validation.log.html
HTMLFDLog=${Logpath}/${SFDC_ORG}.forceDeploy.${DATE}.html

# --- polling knobs (configurable via ${serverProperty}) ---
POLL_MAX_MIN=$(grep -E '^report_poll_minutes=' "$serverProperty" | cut -d'=' -f2 2>/dev/null)
POLL_SLEEP_SEC=$(grep -E '^report_poll_sleep=' "$serverProperty" | cut -d'=' -f2 2>/dev/null)
: "${POLL_MAX_MIN:=10}"      # default: wait up to 10 minutes total
: "${POLL_SLEEP_SEC:=15}"    # default: poll every 15 seconds
MAX_POLLS=$(( (POLL_MAX_MIN*60) / POLL_SLEEP_SEC ))
[ "$MAX_POLLS" -lt 8 ] && MAX_POLLS=8   # minimum ~2 minutes

# ============================== core funcs ==============================

Check_Lock() {
  if [ -f "$LOCK" ]; then
    echo "Another Validation process is present for $SFDC_ORG ...exit"
    mail -s "Another Validation process is present for $SFDC_ORG" ${MAIL_LIST} < /dev/null
    exit
  else
    touch "$LOCK"
  fi
}

Prepare_RunTest() {
  rm -f "$TCNAME" "$TCtxt"
  dos2unix -n build/testClasses.txt "${TCtxt}"
  grep -v "#" "${TCtxt}" | grep -v '^\s*$' | sort -u > "$TCNAME"

  # ensure destination exists
  mkdir -p changeSetDeploy/src/classes

  # copy requested test classes into changeSetDeploy
  while IFS= read -r i; do
    [ -z "$i" ] && continue
    cp "src/classes/$i".* changeSetDeploy/src/classes/ 2>/dev/null || true
  done < "$TCNAME"

  mapfile -t TEST_CLASSES < "$TCNAME"
  TEST_FLAGS=()
  for cls in "${TEST_CLASSES[@]}"; do
    cls="${cls//$'\r'/}"
    cls="${cls##*( )}"; cls="${cls%%*( )}"
    [[ -z "$cls" ]] && continue
    TEST_FLAGS+=(--tests "$cls")
  done
}

Mail_Setup() {
  MAIL_TO=debarshi@cadence.com
  CC=$(grep email_cc ${serverProperty} | cut -d "=" -f2)
  TO=$(grep email_to ${serverProperty} | cut -d "=" -f2)
  FROM=$(grep email_from ${serverProperty} | cut -d "=" -f2)
  MAIL_LIST="-r $FROM -c $CC $TO"
  mutt_MAIL_LIST="$TO -c $CC"
  MAIL=$(grep send_email ${serverProperty} | cut -d "=" -f2)
  case ${MAIL} in
    0) MAIL_LIST=${MAIL_TO}; mutt_MAIL_LIST=${MAIL_TO} ;;
    *) ;;
  esac
}

# ============================== helpers ==============================

_esc(){ sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'; }

# Fast single-pass file index to avoid repeated 'find'
SRC_INDEX_FILE="/tmp/src_file_index.$$"
_build_src_index(){
  find src -type f -printf "%f\t%p\n" > "$SRC_INDEX_FILE" 2>/dev/null || : > "$SRC_INDEX_FILE"
}

# Clean noisy tokens like:
#   "Class Apttus_Agreement_File_AC : External string does not exist: CLLA"
#   "src/ Class ContentDocumentTriggerHandler_AC"
_clean_token(){
  local s="$*"
  # normalize whitespace
  s="$(echo "$s" | tr '\t' ' ' | sed -E 's/[[:space:]]+/ /g; s/^ +| +$//g')"
  # keep left part before common separators
  s="${s%% -- *}"
  s="${s%%:*}"
  s="${s%%|*}"
  # drop 'src/' and noisy leading prefixes
  s="${s#src/}"
  s="$(echo "$s" | sed -E 's#^(Class|Trigger|Apex( class)?|src|/)+[[:space:]]+##I')"
  # remove trailing 'line XX ...'
  s="$(echo "$s" | sed -E 's/[[:space:]]+line[[:space:]]+[0-9]+.*$//I')"
  # final trim
  s="$(echo "$s" | sed -E 's/^ +| +$//g')"
  echo "$s"
}

_guess_dir_for_token(){
  case "$1" in
    *.cls|*Class*|*Handler*|*Controller*) echo "classes" ;;
    *.trigger|*Trigger*)                  echo "triggers" ;;
    *.page)                               echo "pages" ;;
    *.component)                          echo "components" ;;
    *.flexipage|*Flexi*|*Lightning*)      echo "flexipages" ;;
    *.app|*Application*)                  echo "applications" ;;
    *.permissionset|*Permission*)         echo "permissionsets" ;;
    *.workflow|*Workflow*)                echo "workflows" ;;
    *.layout|*Layout*)                    echo "layouts" ;;
    *.object|*__c|*__mdt|*Object*)        echo "objects" ;;
    *flow*|*Flow*)                        echo "flows" ;;
    *RemoteSite*|*remoteSite*)            echo "remoteSiteSettings" ;;
    *Label*|*labels*)                     echo "labels" ;;
    *)                                    echo "" ;;
  esac
}

# Resolve token â†’ list of plausible paths (index first, then narrow find, then global)
_resolve_files(){
  local token raw base dir
  raw="$*"
  token="$(_clean_token "$raw")"
  base="${token##*/}"
  base="${base%-meta.xml}"  # normalize if meta suffix already present

  dir="$(_guess_dir_for_token "$token")"
  local matches=()

  # 1) index lookup (fast)
  if [ -s "$SRC_INDEX_FILE" ]; then
    if [ -n "$dir" ]; then
      mapfile -t matches < <(awk -v b="$base" -v d="/$dir/" -F'\t' '
        index($2,d) && ($1==b || index($1,b)==1) { print length($2), $2 }' "$SRC_INDEX_FILE" \
        | sort -n | cut -d" " -f2-)
    fi
    if [ "${#matches[@]}" -eq 0 ]; then
      mapfile -t matches < <(awk -v b="$base" -F'\t' '
        ($1==b || index($1,b)==1) { print length($2), $2 }' "$SRC_INDEX_FILE" \
        | sort -n | cut -d" " -f2-)
    fi
  fi

  # 2) narrow find in guessed dir
  if [ "${#matches[@]}" -eq 0 ] && [ -n "$dir" ] && [ -d "src/$dir" ]; then
    mapfile -t matches < <(find "src/$dir" -type f \( -name "${base}*" -o -name "*${base}*" \) 2>/dev/null \
      | awk '{ print length, $0 }' | sort -n | cut -d" " -f2-)
  fi

  # 3) global find
  if [ "${#matches[@]}" -eq 0 ]; then
    mapfile -t matches < <(find src -type f \( -name "${base}*" -o -name "*${base}*" \) 2>/dev/null \
      | awk '{ print length, $0 }' | sort -n | cut -d" " -f2-)
  fi

  # labels fallback
  if [ "${#matches[@]}" -eq 0 ] && [[ "$base" =~ ^CustomLabels(\.labels)?$ ]]; then
    matches=("env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml")
  fi

  printf '%s\n' "${matches[@]}"
}

# Print last 2 commits for the best-matching path(s), preferring source over meta
_gitlog_for_component(){
  local token="$*"
  local resolved=()
  mapfile -t resolved < <(_resolve_files "$token")

  if [ "${#resolved[@]}" -eq 0 ]; then
    echo "Latest 2 GIT log >>> (not found): $token"
    echo "Hint: file may be generated/renamed or in a subfolder; searched by prefix and common metadata suffixes."
    return
  fi

  # reorder: non-meta first, meta after (so *.cls beats *.cls-meta.xml)
  local preferred=() meta=()
  local f
  for f in "${resolved[@]}"; do
    if [[ "$f" =~ -meta\.xml$ ]]; then meta+=("$f"); else preferred+=("$f"); fi
  done
  local ordered=( "${preferred[@]}" "${meta[@]}" )

  local shown=0
  for f in "${ordered[@]}"; do
    echo "Latest 2 GIT log >>> ${f}"
    if [ -f "$f" ]; then
      git --no-pager log -2 --date=short --pretty='format:%h %ad %an %s' -- "$f" \
        | sed 's/$/ |/' | paste -sd' ' -
    else
      echo "(exists-in-index? Could not read path: $f)"
    fi
    shown=$((shown+1))
    [ $shown -ge 3 ] && break
  done
}

# ============================== deploy & report ==============================

Validation() {
  sf project deploy validate \
      --source-dir changeSetDeploy \
      --test-level RunSpecifiedTests \
      "${TEST_FLAGS[@]}" \
      --target-org "$SFDC_ORG" \
      --wait 60 \
      --json > "${LOG}.initial.json" 2> "${LOG}.err"

  cat "${LOG}.err" > "$LOG"
  cat "${LOG}.initial.json" >> "$LOG"

  INITIAL_STATUS=$(jq -r '.status' "${LOG}.initial.json" 2>/dev/null)
  if [ "$INITIAL_STATUS" == "0" ]; then
    cp "${LOG}.initial.json" "$REPORT_JSON"
    antReturnCode="DEPLOYMENT SUCCEEDED"
  else
    ERROR_NAME=$(jq -r '.name' "${LOG}.initial.json" 2>/dev/null)
    if [ "$ERROR_NAME" == "FailedValidationError" ]; then
      DEPLOY_ID=$(jq -r '.data.deployId' "${LOG}.initial.json" 2>/dev/null)
      if [ -z "$DEPLOY_ID" ] || [ "$DEPLOY_ID" = "null" ]; then
        echo "[ERROR] No deploy ID found in initial output" | tee -a "$LOG"
        antReturnCode="Request Status: Failed"
      else
        # fetch & bounded poll
        sf project deploy report --job-id "$DEPLOY_ID" --target-org "$SFDC_ORG" --json > "$REPORT_JSON" 2> "${LOG}.err"
        cat "${LOG}.err" >> "$LOG"

        START_TS=$(date +%s)
        POLL_COUNT=0
        while : ; do
          RESULT_STATUS=$(jq -r '.result.status // .status // empty' "$REPORT_JSON" 2>/dev/null)
          [ "$RESULT_STATUS" != "InProgress" ] && break

          [ "$POLL_COUNT" -ge "$MAX_POLLS" ] && { echo "[INFO] Poll cap reached after ${POLL_COUNT} polls." >> "$LOG"; break; }

          jq -r '[
              "status=\(.result.status // .status // "n/a")",
              "tests=\((.result.numberTestsCompleted // 0)|tostring)/\((.result.numberTestsTotal // 0)|tostring)",
              "comp=\((.result.numberComponentsDeployed // 0)|tostring)/\((.result.numberComponentsTotal // 0)|tostring)"
            ] | join(" ")' "$REPORT_JSON" 2>/dev/null | sed "s/^/[PROGRESS] /" >> "$LOG"

          sleep "$POLL_SLEEP_SEC"
          ((POLL_COUNT++))
          sf project deploy report --job-id "$DEPLOY_ID" --target-org "$SFDC_ORG" --json > "$REPORT_JSON" 2> "${LOG}.err"
          cat "${LOG}.err" >> "$LOG"
        done

        ELAPSED=$(( $(date +%s) - START_TS ))
        echo "[INFO] Report fetch finished with status=${RESULT_STATUS} in ${ELAPSED}s (polls=${POLL_COUNT})." >> "$LOG"

        if   [ "$RESULT_STATUS" == "Failed" ];     then antReturnCode="Request Status: Failed"
        elif [ "$RESULT_STATUS" == "Succeeded" ];  then antReturnCode="DEPLOYMENT SUCCEEDED"
        elif [ "$RESULT_STATUS" == "InProgress" ]; then antReturnCode="Failed to obtain result from server within specified time"
        else antReturnCode="Request Status: Failed"
        fi
      fi
    elif jq -r '.message' "${LOG}.initial.json" 2>/dev/null | grep -iq "locked"; then
      antReturnCode="ALREADY_IN_PROCESS"
    else
      antReturnCode="Failed to obtain result from server within specified time"
    fi
  fi

  # filtered human log
  if [ -s "$REPORT_JSON" ]; then
    jq -r '.result.details | {componentFailures, runTestResult: {failures, codeCoverageWarnings}}' "$REPORT_JSON" > "${LOG}.filtered.json" 2>/dev/null || true
    jq -r 'to_entries | map("\(.key): \(.value)") | join("\n")' "${LOG}.filtered.json" > "${LOG}.filtered" 2>/dev/null || true
  else
    jq -r '.message // "No report.json available; see error log."' "${LOG}.initial.json" > "${LOG}.filtered" 2>/dev/null || echo "No JSON output captured." > "${LOG}.filtered"
  fi

  case $antReturnCode in
    "DEPLOYMENT SUCCEEDED") HTML_Report SUCCEEDED; PublishLOG changeset ;;
    "ALREADY_IN_PROCESS")   HTML_Report LOCKED;    PublishLOG changeset ;;
    "Request Status: Failed"|"Failed to obtain result from server within specified time")
                            HTML_Report FAILED;    PublishLOG changeset ;;
  esac
}

# ============================== HTML Report ==============================

HTML_Report(){
  Report=$1

  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")

  echo "<HTML>" > $HTMLLog
  echo "<BODY>" >> $HTMLLog
  echo "<table width=100%>" >> $HTMLLog

  # build index once for speed
  _build_src_index

  if [ "${Report}" == "SUCCEEDED" ]; then
    echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} Validation suceeded report</td></tr></H3>" >> $HTMLLog
    echo "<H5><PRE><tr><td bgcolor=\"LightGreen\">$(jq -r '.result | "Deploy ID: \(.id)\nStatus: \(.status)\nSuccess: \(.success)"' "$REPORT_JSON" 2>/dev/null | _esc)</td></tr></PRE></H5>" >> $HTMLLog
    echo "<tr><td bgcolor=\"LightBlue\"></tr></td>" >> $HTMLLog
    echo "<tr><td bgcolor=\"Yellow\"></tr></td>" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}\">Log and changeset</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${SFDC_ORG}.changesetList.${DATE}.html\">Changeset List</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${HTMLFDLog##*/}\">ForceDeploy</a>" >> $HTMLLog
    echo "<br/>API used: ${API}" >> $HTMLLog

    Changeset_List
    #CHNGSETLIST

  elif [ "${Report}" == "FAILED" ]; then
    REQ_ID=$(jq -r '.result.id // "N/A"' "$REPORT_JSON" 2>/dev/null || echo "N/A")
    echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} Validation failure report</td></tr></H3>" >> $HTMLLog
    echo "<H5><tr><td bgcolor=\"Khaki\">Request ID: ${REQ_ID}</td></tr></H5>" >> $HTMLLog
    echo "<tr><td bgcolor=\"LightBlue\"></tr></td>" >> $HTMLLog
    echo "<tr><td bgcolor=\"Yellow\"></tr></td>" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}\">Log and changeset</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${SFDC_ORG}.changesetList.${DATE}.html\">Changeset List</a>" >> $HTMLLog
    echo "&nbsp" >> $HTMLLog
    echo "<a href=\"https://cdnsfdc.cadence.com/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/${HTMLFDLog##*/}\">ForceDeploy</a>" >> $HTMLLog
    echo "<br/>API used: ${API}" >> $HTMLLog

    # Component Failures
    if [ -s "$REPORT_JSON" ]; then
      jq -r '.result.details.componentFailures[] | [.fileName, .problem] | join(" -- ")' "$REPORT_JSON" > "${LOG}.component_failures" 2>/dev/null || : > "${LOG}.component_failures"
    else
      : > "${LOG}.component_failures"
    fi

    for FILE in $(awk -F ' -- ' '{print $1}' "${LOG}.component_failures" | uniq); do
      echo "<tr><td bgcolor=\"LightSalmon\"><PRE>" >> $HTMLLog
      grep "${FILE}" "${LOG}.component_failures" | _esc >> $HTMLLog
      echo "</PRE></td></tr>" >> $HTMLLog

      if [ "${FILE}" == "labels/CustomLabels.labels-meta.xml" ]; then
        FILE="env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml"
      elif [[ "${FILE}" =~ remoteSiteSettings/ ]]; then
        FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
      elif [[ "${FILE}" =~ src/customMetadata/ ]]; then
        FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
      fi

      echo "<tr><td bgcolor=\"Gainsboro\"><PRE>" >> $HTMLLog
      _gitlog_for_component "${FILE}" | _esc >> $HTMLLog
      echo "</PRE></td></tr>" >> $HTMLLog
    done

    # Test Failures
    echo "<tr><td bgcolor=\"Yellow\"><H4>${SFDC_ORG} Test Class </H4></td></tr>" >> $HTMLLog
    if [ -s "$REPORT_JSON" ]; then
      jq -r '.result.details.runTestResult.failures[] | [.name, .methodName, .message, .stackTrace] | join("\t")' "$REPORT_JSON" > "${LOG}.test_failures" 2>/dev/null || : > "${LOG}.test_failures"
    else
      : > "${LOG}.test_failures"
    fi

    idx=1
    while IFS=$'\t' read -r CLASS METHOD MSG STACK; do
      [ -z "$CLASS" ] && continue
      echo "<tr><td bgcolor=\"LightYellow\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
      echo "${idx}. ${CLASS}.${METHOD}() -- Error: ${MSG}" | _esc >> ${HTMLLog}
      echo "StackTrace: ${STACK}" | _esc >> ${HTMLLog}
      echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

      echo "<tr><td bgcolor=\"Gainsboro\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
      _gitlog_for_component "${CLASS}" | _esc >> ${HTMLLog}
      echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

      ((idx++))
    done < "${LOG}.test_failures"

    # Code Coverage Warnings
    echo "<tr><td bgcolor=\"Yellow\"><H4>${SFDC_ORG} Code Coverage</H4></td></tr>" >> $HTMLLog
    if [ -s "$REPORT_JSON" ]; then
      jq -r '.result.details.runTestResult.codeCoverageWarnings[] | [.name, .message] | join("\t")' "$REPORT_JSON" > "${LOG}.code_coverage_warnings" 2>/dev/null || : > "${LOG}.code_coverage_warnings"
    else
      : > "${LOG}.code_coverage_warnings"
    fi

    cov_idx=1
    while IFS=$'\t' read -r NAME MESSAGE; do
      [ -z "$NAME" ] && continue
      echo "<tr><td bgcolor=\"LightSalmon\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
      echo "${cov_idx}. ${NAME} -- Warning: ${MESSAGE}" | _esc >> ${HTMLLog}
      echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

      echo "<tr><td bgcolor=\"Gainsboro\"><PRE><FONT SIZE=2>" >> ${HTMLLog}
      _gitlog_for_component "${NAME}" | _esc >> ${HTMLLog}
      echo "</FONT></PRE></td></tr>" >> ${HTMLLog}

      ((cov_idx++))
    done < "${LOG}.code_coverage_warnings"

    Changeset_List
    #CHNGSETLIST

  elif [ "${Report}" == "LOCKED" ]; then
    echo "<H3><tr><td bgcolor=\"SeaShell\">${SFDC_ORG} is Locked</td></tr></H3>" >> $HTMLLog
    echo "<H5><PRE><tr><td bgcolor=\"LightYellow\">$(jq -r '.result.details' "$REPORT_JSON" 2>/dev/null | grep -i locked | _esc)</td></tr></PRE></H5>" >> $HTMLLog
  fi

  echo "</table>" >> $HTMLLog
  echo "</HTML></BODY>" >> $HTMLLog

  EMAIL=${FROM} mutt -e 'set content_type=text/html' \
    -s "---${SFDC_ORG}---ChangeSet Validation ${Report} [$(date +%d.%b.%Y) PST - git ${gitlast}-${gitlatest} ]" \
    ${mutt_MAIL_LIST} -a "$LOG.filtered" < "$HTMLLog"

  IFS=$SAVEIFS
}

# ============================== Changeset & publish ==============================

Changeset_List(){
  _build_src_index

  find changeSetDeploy -type f | egrep -v "package.xml|staticResourceFolders.txt" \
    | cut -d "/" -f  1,2 --complement | sort -u > "${DEPLOYEDFILE}"

  changesetFile=$(find changeSetDeploy -type f | egrep -v "package.xml|staticResourceFolders.txt" | wc -l)
  echo "<tr><td bgcolor=\"SeaShell\">Changeset file/s ... [${changesetFile}]</td></tr>" >> $HTMLLog

  NUM=1
  while IFS= read -r FILE; do
    [ -z "$FILE" ] && continue
    if [ "${FILE}" == "labels/CustomLabels.labels-meta.xml" ]; then
      FILE="env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml"
    elif [[ "${FILE}" =~ remoteSiteSettings/ ]]; then
      FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
    elif [[ "${FILE}" =~ src/customMetadata/ ]]; then
      FILE=$(echo "${FILE}" | sed -e "s/^env\/${SFDC_ORG}//g")
    fi

    echo "<tr><td bgcolor=\"Ivory\"><PRE>" >> $HTMLLog
    echo " [$((NUM++))] ${FILE}" | _esc >> ${HTMLLog}
    echo "</PRE></td></tr>" >> $HTMLLog

    LastAuthor="$(
      _resolve_files "${FILE}" | head -n1 | while read -r p; do
        if [ -f "$p" ]; then
          git --no-pager log -1 --date=short --pretty='format:%h %ad %an %s' -- "$p"
        fi
        break
      done
    )"

    echo "<tr><td bgcolor=\"Gainsboro\"><PRE>" >> $HTMLLog
    echo "Last author... ${LastAuthor}" | _esc >> $HTMLLog
    echo "</PRE></td></tr>" >> $HTMLLog
  done < "${DEPLOYEDFILE}"

  echo "</table>" >> $HTMLLog
}

CHNGSETLIST (){
  ORGchngSet=${SFDC_ORG}.${DATE}.changeSetDeploy
  ORGchngSetFILE=${Logpath}/${SFDC_ORG}.changesetList.${DATE}
  cp -r changeSetDeploy  ${ORGchngSet}
  if [ -d ${ORGchngSet}/src/staticresources ]; then
    cd ${ORGchngSet}
    bash ${bin}/staticresource_decompress.sh
  fi
  cd - >/dev/null 2>&1 || true
  find ${ORGchngSet}/customSettings/src/env/ ${ORGchngSet}/src/ -type f \
    | egrep -v  "package.xml|staticResourceFolders.txt" \
    | cut -d "/" -f3-20 | sort > ${ORGchngSetFILE}.csv
  sed -e "s/$/<br><br>/ ;1 i<HTML>\n<BODY>" ${ORGchngSetFILE}.csv >  ${ORGchngSetFILE}.html
  sed -i "\$a</BODY>\n</HTML>" ${ORGchngSetFILE}.html
}

PublishLOG(){
  LogStorePath="/data/public/SFDC_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}"
  mkdir -p ${LogStorePath}

  if [ "$1" == "changeset" ]; then
    cp ${CHANGESETLOG} ${LogStorePath}/$SFDC_ORG.Changeset.log.${DATE} 2>/dev/null || true
    cp ${LOG} ${LogStorePath}/$SFDC_ORG.Deploy.log.${DATE} 2>/dev/null || true
    cp ${HTMLLog} ${LogStorePath}/${SFDC_ORG}.Deploy.log.${DATE}.html 2>/dev/null || true

    cp -r changeSetDeploy ${LogStorePath}/${SFDC_ORG}.changeSetDeploy.${DATE} 2>/dev/null || true
    cp ${ORGchngSetFILE}.html  ${ORGchngSetFILE}.csv ${LogStorePath}/ 2>/dev/null || true
    cp $REPORT_JSON ${LogStorePath}/ 2>/dev/null || true
  fi
}

Unlock(){ rm -f "$LOCK"; }

Trap(){ trap Unlock SIGINT; }

FAIL_EXIT(){ rm -f "$LOCK"; exit; }

# ============================== entry ==============================
main "$@"
