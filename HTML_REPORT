HTML_REPORT() {

  Report=$1

  # -------- Shared Vars --------
  GIT_REMOTE_URL="$(git config --get remote.origin.url)"
  BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  DATE_TIME_IST="$(TZ=IST date '+%d %b %Y %H:%M IST')"
  REQUEST_ID="$(jq -r '.result.id // .result.requestId // empty' "$LOG.filtered" 2>/dev/null)"
  RUN_ID="${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}"

  OPEN_LOGS_URL="https://cdnsfdc.cadence.com/SFDC_LOG_SFCLI/${RUN_ID}/index.html"
  COMBINED_PMD_HTML_URL="https://cdnsfdc.cadence.com/SFDC_LOG_SFCLI/${RUN_ID}/pmd/combined.html"
  COMBINED_PMD_CSV_URL="https://cdnsfdc.cadence.com/SFDC_LOG_SFCLI/${RUN_ID}/pmd/combined.csv"
  FORCE_DEPLOY_FILE_URL="https://cdnsfdc.cadence.com/SFDC_LOG_SFCLI/${RUN_ID}/force_deploy.html"

  # foldered-metadata list (provided by you)
  SFCliMetaMetaHasFolder="${property}/${SFDC_ORG}_SFCliMetaMetaHasFolder.list"

  # Component pass/fail (best effort)
  COMP_PASS="$(jq -r '(.result.numberComponentsDeployed // .numberComponentsDeployed // 0)' "$LOG.filtered" 2>/dev/null)"
  COMP_FAIL="$(jq -r '(.result.numberComponentErrors // .numberComponentErrors // (.result.details.componentFailures|length // 0))' "$LOG.filtered" 2>/dev/null)"
  [ -z "$COMP_PASS" ] && COMP_PASS=0
  [ -z "$COMP_FAIL" ] && COMP_FAIL=0

  # Times (best effort; will show raw if not parseable)
  START_TIME_IST="$(jq -r '.result.startDate // empty' "$LOG.filtered" 2>/dev/null)"
  END_TIME_IST="$(jq -r '.result.completedDate // .result.completedDate // empty' "$LOG.filtered" 2>/dev/null)"
  TOTAL_DURATION="N/A"
  if [ -n "$START_TIME_IST" ] && [ -n "$END_TIME_IST" ]; then
    start_s=$(date -d "$START_TIME_IST" +%s 2>/dev/null || echo "")
    end_s=$(date -d "$END_TIME_IST" +%s 2>/dev/null || echo "")
    if [ -n "$start_s" ] && [ -n "$end_s" ] && [ "$end_s" -gt "$start_s" ]; then
      dur=$((end_s - start_s))
      TOTAL_DURATION="$(printf '%02dh %02dm %02ds' $((dur/3600)) $(((dur%3600)/60)) $((dur%60)))"
    else
      TOTAL_DURATION="$START_TIME_IST → $END_TIME_IST"
    fi
  fi

  # ---- PMD rollups (current changeset only) ----
  CLASS_COUNT=$(ls changeSetDeploy/force-app/main/default/classes/*.cls 2>/dev/null | wc -l)
  TRIGGER_COUNT=$(ls changeSetDeploy/force-app/main/default/triggers/*.trigger 2>/dev/null | wc -l)
  PMD_HIGH_CLS=0
  PMD_HIGH_TRG=0

  # Your existing PMD pattern
  pattern="ApexUnitTestShouldNotUseSeeAllDataTrue:\|UnusedLocalVariable:\|ClassNamingConventions:\|FieldDeclarationsShouldBeAtStart:\|FieldNamingConventions:\|FormalParameterNamingConventions:\|LocalVariableNamingConventions:\|MethodNamingConventions:\|PropertyNamingConventions:\|ExcessiveClassLength:\|ExcessiveParameterList:\|ApexDoc:\|ApexCSRF:\|AvoidDirectAccessTriggerMap:\|AvoidHardcodingId:\|AvoidNonExistentAnnotations:\|EmptyCatchBlock:\|EmptyIfStmt:\|EmptyStatementBlock:\|EmptyTryOrFinallyBlock:\|EmptyWhileStmt:\|InaccessibleAuraEnabledGetter:\|MethodWithSameNameAsEnclosingClass:\|OverrideBothEqualsAndHashcode:\|TestMethodsMustBeInTestClasses:\|AvoidDmlStatementsInLoops:\|AvoidSoqlInLoops:\|AvoidSoslInLoops:\|OperationWithLimitsInLoop:\|ApexBadCrypto:\|ApexDangerousMethods:\|ApexInsecureEndpoint:\|ApexOpenRedirect:\|ApexSharingViolations:\|ApexSOQLInjection:\|ApexSuggestUsingNamedCred:"

  PMD_ROWS=""

  # ----- Per-class PMD rows -----
  if ls changeSetDeploy/force-app/main/default/classes/*.cls >/dev/null 2>&1; then
    for classeName in changeSetDeploy/force-app/main/default/classes/*.cls; do
      classeNameMod=$(echo "$classeName" | sed 's|changeSetDeploy/force-app/main/default/classes/||' | sed 's/.cls$/.cls_currpmd.html/')
      CurrseverityFile=$(echo "${classeNameMod}" | sed 's/.cls_currpmd.html/.cls_currpmd.txt/')
      OrgseverityFile=$(echo "${classeNameMod}" | sed 's/.cls_currpmd.html/.cls_orgpmd.txt/')

      OriginalPmd=$(grep -h "Original PMD Warnings Total" "/data/public/pmd_rule/$SFDC_ORG/$classeNameMod" 2>/dev/null | cut -d ":" -f 2)
      Currentpmd=$(grep -h "Current PMD Warnings Total"  "/data/public/pmd_rule/$SFDC_ORG/$classeNameMod" 2>/dev/null | cut -d ":" -f 2)
      [ -z "$OriginalPmd" ] && OriginalPmd=0
      [ -z "$Currentpmd" ] && Currentpmd=0

      CurrseverityCnt=$(grep -ho "$pattern" "PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/classes/$CurrseverityFile" 2>/dev/null | wc -l)
      OrgseverityCnt=$(grep -ho "$pattern" "PMDReport/orgpmdoutput/src/classes/$OrgseverityFile" 2>/dev/null | wc -l)
      [ -z "$CurrseverityCnt" ] && CurrseverityCnt=0
      [ -z "$OrgseverityCnt" ] && OrgseverityCnt=0

      PMD_HIGH_CLS=$((PMD_HIGH_CLS + CurrseverityCnt))

      link_text=$(echo "${classeNameMod}" | sed 's/.cls_currpmd.html/.cls/')
      link_href="https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$classeNameMod"
      delta=$((CurrseverityCnt - OrgseverityCnt))
      if [ "$CurrseverityCnt" -gt "$OrgseverityCnt" ]; then
        link_class='file-link sev-high'
        delta_cell="<td class=\"delta up\">+$delta</td>"
      else
        link_class='file-link'
        [ "$delta" -gt 0 ] && delta_cell="<td class=\"delta up\">+$delta</td>" || delta_cell="<td class=\"delta down\">$delta</td>"
      fi

      PMD_ROWS+="<tr>
        <th class=\"mono\"><a class=\"$link_class\" href=\"$link_href\">$link_text</a></th>
        <td>${OriginalPmd} (${OrgseverityCnt})</td>
        <td><strong>${Currentpmd} (${CurrseverityCnt})</strong></td>
        $delta_cell
      </tr>
"
    done
  fi

  # ----- Per-trigger PMD rows -----
  if ls changeSetDeploy/force-app/main/default/triggers/*.trigger >/dev/null 2>&1; then
    for triggerName in changeSetDeploy/force-app/main/default/triggers/*.trigger; do
      triggerNameMod=$(echo "$triggerName" | sed 's|changeSetDeploy/force-app/main/default/triggers/||' | sed 's/.trigger$/.trigger_currpmd.html/')

      OriginalPmd=$(grep -h "Original PMD Warnings Total" "/data/public/pmd_rule/$SFDC_ORG/$triggerNameMod" 2>/dev/null | cut -d ":" -f 2)
      Currentpmd=$(grep -h "Current PMD Warnings Total"  "/data/public/pmd_rule/$SFDC_ORG/$triggerNameMod" 2>/dev/null | cut -d ":" -f 2)
      [ -z "$OriginalPmd" ] && OriginalPmd=0
      [ -z "$Currentpmd" ] && Currentpmd=0

      CurrseverityFile=$(echo "${triggerNameMod}" | sed 's/.trigger_currpmd.html/.trigger_currpmd.txt/')
      OrgseverityFile=$(echo "${triggerNameMod}" | sed 's/.trigger_currpmd.html/.trigger_orgpmd.txt/')

      CurrseverityCnt=$(grep -ho "$pattern" "PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/triggers/$CurrseverityFile" 2>/dev/null | wc -l)
      OrgseverityCnt=$(grep -ho "$pattern" "PMDReport/orgpmdoutput/src/triggers/$OrgseverityFile" 2>/dev/null | wc -l)
      [ -z "$CurrseverityCnt" ] && CurrseverityCnt=0
      [ -z "$OrgseverityCnt" ] && OrgseverityCnt=0

      PMD_HIGH_TRG=$((PMD_HIGH_TRG + CurrseverityCnt))

      link_text=$(echo "${triggerNameMod}" | sed 's/.trigger_currpmd.html/.trigger/')
      link_href="https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$triggerNameMod"
      delta=$((CurrseverityCnt - OrgseverityCnt))
      if [ "$CurrseverityCnt" -gt "$OrgseverityCnt" ]; then
        link_class='file-link sev-high'
        delta_cell="<td class=\"delta up\">+$delta</td>"
      else
        link_class='file-link'
        [ "$delta" -gt 0 ] && delta_cell="<td class=\"delta up\">+$delta</td>" || delta_cell="<td class=\"delta down\">$delta</td>"
      fi

      PMD_ROWS+="<tr>
        <th class=\"mono\"><a class=\"$link_class\" href=\"$link_href\">$link_text</a></th>
        <td>${OriginalPmd} (${OrgseverityCnt})</td>
        <td><strong>${Currentpmd} (${CurrseverityCnt})</strong></td>
        $delta_cell
      </tr>
"
    done
  fi

  # -------- HTML HEAD + CSS (common) --------
  cat > "$HTMLLog" <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta http-equiv="x-ua-compatible" content="ie=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>${SFDC_ORG} — Deployment ${Report} Report</title>
<style>
  body{margin:0;padding:0;background:#fafafa;color:#222;font:12px/1.4 -apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif}
  .container{max-width:980px;margin:12px auto;background:#fff;border:1px solid #e8e8e8;border-radius:8px;overflow:hidden;box-shadow:0 2px 6px rgba(0,0,0,.04)}
  .titlebar{color:#fff;padding:10px 14px}
  .titlebar .t{font-size:14px;font-weight:900;letter-spacing:.2px}
  .meta-wrap{padding:8px 14px}
  .meta-panel{border-radius:8px;padding:8px}
  .meta-title{margin:0 0 4px 0;font-weight:800}
  .meta-grid{display:grid;grid-template-columns:repeat(5,1fr);gap:8px}
  .meta-item{border-radius:6px;padding:6px 8px;border:1px dashed}
  .k{font-size:10px;text-transform:uppercase;letter-spacing:.2px;opacity:.8}
  .v{font-size:11px;font-weight:800}
  .mono{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,"Liberation Mono",monospace}
  .links{padding:8px 14px;border-top:1px solid #eee;border-bottom:1px solid #eee}
  .btn{display:inline-block;margin:2px 6px 0 0;padding:7px 12px;border-radius:9px;font-size:11px;font-weight:900;letter-spacing:.2px;text-decoration:none;color:#fff;background:linear-gradient(180deg,#2b6fdd 0%,#0d47a1 100%);border:1px solid #0d47a1;box-shadow:0 3px 10px rgba(13,71,161,.28),inset 0 1px 0 rgba(255,255,255,.25)}
  .btn:active{transform:translateY(1px)}
  .section{padding:10px 14px}
  .section h3{margin:0 0 6px;font-size:13px;letter-spacing:.2px;color:#0d47a1;text-transform:uppercase}
  .kpis{display:flex;flex-wrap:wrap;gap:4px}
  .kpi{flex:1 1 130px;min-width:130px;border:1px solid #eee;border-radius:6px;padding:6px 8px}
  .kpi .label{font-size:9px;color:#666;text-transform:uppercase}
  .kpi .value{font-size:13px;font-weight:800;margin-top:2px}
  .kpi .sub{font-size:9.5px;color:#666}
  .soft-green{background:#e8f5e9;border-color:#c8e6c9}
  .soft-khaki{background:#fff4c4;border-color:#f0dd7a}
  .soft-blue{background:#eaf2ff;border-color:#d8e6ff}
  .soft-black{background:#f4f4f4;border-color:#e0e0e0}
  .mini{font-size:9.5px}
  table.tbl{width:100%;border-collapse:collapse;border-spacing:0}
  .tbl thead th{text-align:left;background:#eaf2ff;color:#0d47a1;border-bottom:1px solid #d8e6ff;padding:6px;font-size:11px;text-transform:uppercase;letter-spacing:.2px}
  .tbl tbody td,.tbl tbody th{padding:6px;border-bottom:1px solid #f0f0f0;font-size:12px}
  .tbl tbody tr:nth-child(even) td,.tbl tbody tr:nth-child(even) th{background:#fcfcfc}
  .pre{white-space:pre-wrap;word-break:break-word}
  .khaki{background:Khaki}
  .gainsboro{background:#dcdcdc !important}
  .lightgreen{background:LightGreen}
  a.file-link{color:#111;text-decoration:underline;font-weight:700}
  a.file-link.sev-high{color:#c62828;text-decoration:underline}
  .delta.up{color:#c62828;font-weight:700}
  .delta.down{color:#2e7d32;font-weight:700}
  .footer{padding:10px 14px;border-top:1px solid #eee;color:#666;font-size:11px;text-align:center;background:#fafafa}
</style>
</head>
<body>
  <div class="container">
EOF

  # -------- Title + Run Details --------
  if [ "${Report}" = "SUCCEEDED" ]; then
    cat >> "$HTMLLog" <<EOF
    <div class="titlebar" style="background:#2e7d32;"><div class="t">${SFDC_ORG} Deployment Success Report</div></div>
    <div class="meta-wrap">
      <div class="meta-panel" style="background:LightGreen;color:#0a3a0a;border:1px solid #7fdc7f;">
        <p class="meta-title">Run Details</p>
        <div class="meta-grid">
          <div class="meta-item" style="background:#f5f5f5;border-color:#dddddd;"><div class="k">Run (IST)</div><div class="v">${DATE_TIME_IST}</div></div>
          <div class="meta-item" style="background:#f5f5f5;border-color:#dddddd;"><div class="k">API</div><div class="v">${SetAPI}</div></div>
          <div class="meta-item" style="background:#f5f5f5;border-color:#dddddd;"><div class="k">Branch</div><div class="v">${BRANCH}</div></div>
          <div class="meta-item" style="background:#f5f5f5;border-color:#dddddd;"><div class="k">Repo</div><div class="v mono">${GIT_REMOTE_URL}</div></div>
          <div class="meta-item" style="background:#f5f5f5;border-color:#dddddd;"><div class="k">Request ID</div><div class="v mono">${REQUEST_ID}</div></div>
        </div>
      </div>
    </div>
EOF
  else
    cat >> "$HTMLLog" <<EOF
    <div class="titlebar" style="background:#c62828;"><div class="t">${SFDC_ORG} Deployment Failure Report</div></div>
    <div class="meta-wrap">
      <div class="meta-panel" style="background:Khaki;color:#3b2d00;border:1px solid #e2c65c;">
        <p class="meta-title">Run Details</p>
        <div class="meta-grid">
          <div class="meta-item" style="background:#fff8e1;border-color:#f0d88a;"><div class="k">Run (IST)</div><div class="v">${DATE_TIME_IST}</div></div>
          <div class="meta-item" style="background:#fff8e1;border-color:#f0d88a;"><div class="k">API</div><div class="v">${SetAPI}</div></div>
          <div class="meta-item" style="background:#fff8e1;border-color:#f0d88a;"><div class="k">Branch</div><div class="v">${BRANCH}</div></div>
          <div class="meta-item" style="background:#fff8e1;border-color:#f0d88a;"><div class="k">Repo</div><div class="v mono">${GIT_REMOTE_URL}</div></div>
          <div class="meta-item" style="background:#fff8e1;border-color:#f0d88a;"><div class="k">Request ID</div><div class="v mono">${REQUEST_ID}</div></div>
        </div>
      </div>
    </div>
EOF
  fi

  # -------- Buttons --------
  cat >> "$HTMLLog" <<EOF
    <div class="links">
      <a class="btn" href="${OPEN_LOGS_URL}">Open Logs</a>
      <a class="btn" href="${COMBINED_PMD_HTML_URL}">Combined PMD</a>
      <a class="btn" href="${COMBINED_PMD_CSV_URL}">Download PMD CSV</a>
      <a class="btn" href="${FORCE_DEPLOY_FILE_URL}">Force Deploy File</a>
    </div>

    <div class="section">
      <h3>Status Summary</h3>
      <div class="kpis">
        <div class="kpi $( [ "${Report}" = "SUCCEEDED" ] && echo soft-green || echo soft-khaki )">
          <div class="label">Deployment</div>
          <div class="value">$( [ "${Report}" = "SUCCEEDED" ] && echo Succeeded || echo Failed )</div>
          <div class="sub">Passed: <strong>${COMP_PASS}</strong>$( [ "${Report}" = "FAILED" ] && echo ' <span class="mono"> • </span> Failed: <strong>'${COMP_FAIL}'</strong>' )</div>
        </div>
        <div class="kpi soft-blue">
          <div class="label">PMD — Current Changeset</div>
          <div class="value mini">Classes: <strong>${CLASS_COUNT}</strong> • Triggers: <strong>${TRIGGER_COUNT}</strong></div>
          <div class="sub">High (Classes): <strong>${PMD_HIGH_CLS}</strong> • High (Triggers): <strong>${PMD_HIGH_TRG}</strong></div>
        </div>
        <div class="kpi soft-black">
          <div class="label">Deployment Time</div>
          <div class="value">${TOTAL_DURATION}</div>
          <div class="sub">Start: <span class="mono">${START_TIME_IST}</span> • End: <span class="mono">${END_TIME_IST}</span></div>
        </div>
      </div>
    </div>
EOF

  # -------- PMD Section --------
  if [ -f /tmp/CodeAnalysisReport.txt ]; then
    cat >> "$HTMLLog" <<EOF
    <div class="section">
      <h3>PMD Review</h3>
      <div class="kpi soft-blue" style="padding:8px 10px;">No PMD code review generated because classes or triggers do not exist in changeSet.</div>
    </div>
EOF
  else
    cat >> "$HTMLLog" <<EOF
    <div class="section">
      <h3>PMD Review</h3>
      <table class="tbl">
        <thead><tr><th>Class / Trigger</th><th>Original (High)</th><th>Current (High)</th><th>Δ High</th></tr></thead>
        <tbody>
${PMD_ROWS}
        </tbody>
      </table>
      <div class="muted" style="margin-top:4px;">Combined report & CSV available via the buttons above.</div>
    </div>
EOF
  fi

  # -------- Report-specific Sections --------
  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")

  if [ "${Report}" = "SUCCEEDED" ]; then
    # Build changeset file list (keep your logic; preserves nested folders)
    find changeSetDeploy/force-app/main/default -type f \
      | egrep -v "customSettings|staticResourceFolders.txt" \
      | sed 's|^changeSetDeploy/force-app/main/default|src|' \
      | sort -u > "${DEPLOYEDFILE}"

    changesetFile=$(find changeSetDeploy/force-app/main/default -type f | egrep -v "customSettings|staticResourceFolders.txt" | wc -l)

    cat >> "$HTMLLog" <<EOF
    <div class="section">
      <h3>Changeset file/s ...[${changesetFile}]</h3>
      <table class="tbl">
        <tbody>
EOF

    NUM=1
    for FILE in $(cat "${DEPLOYEDFILE}"); do
      if [ "${FILE}" = "src/labels/CustomLabels.labels-meta.xml" ]; then
        FILE="src/env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml"
      elif echo "$FILE" | grep -q "^customSettings"; then
        FILE=$(echo "${FILE}" | sed -e 's/^customSettings\///g')
      elif [[ "${FILE}" =~ "src/remoteSiteSettings/" ]]; then
        FILE=$(echo "${FILE}" | sed -e "s/^src/src\/env\/${SFDC_ORG}/g")
      elif [[ "${FILE}" =~ "src/customMetadata/" ]]; then
        FILE=$(echo "${FILE}" | sed -e "s/^src/src\/env\/${SFDC_ORG}/g")
      fi

      echo "          <tr><td class=\"pre mono lightgreen\"> [$((NUM++))] ${FILE}</td></tr>" >> "$HTMLLog"
      LastAuthor=$(git log -1 "${FILE}" 2>/dev/null | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g')
      echo "          <tr><td class=\"pre mono gainsboro\">Last author... ${LastAuthor}</td></tr>" >> "$HTMLLog"
    done

    cat >> "$HTMLLog" <<EOF
        </tbody>
      </table>
    </div>
EOF

  elif [ "${Report}" = "FAILED" ]; then
    # All Component Failures (compact) with fixed path resolution
    cat >> "$HTMLLog" <<EOF
    <div class="section">
      <h3>All Component Failures</h3>
      <table class="tbl compact"><tbody>
EOF

    i=1
    for failure in $(jq -c '.result.details.componentFailures[]' "$LOG.filtered"); do
      fileName=$(echo "$failure" | jq -r '.fileName')     # e.g., reports/CPQ/example.report OR objects/Case/fields/Region__c.field-meta.xml
      errorMsg=$(echo "$failure" | jq -r '.problem')

      sanitizedErrorMsg=$(echo "$errorMsg" \
        | tr '\n' ' ' | tr '\r' ' ' \
        | sed -e 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')

      # Khaki error line (verbatim server path)
      echo "        <tr><td class=\"pre mono khaki\">$i. $fileName -- Error: $sanitizedErrorMsg</td></tr>" >> "$HTMLLog"

      # -------- FIX: resolve repo path without dropping subfolders --------
      gitFile=""
      topType="$(echo "$fileName" | cut -d/ -f1)"            # e.g., objects, reports, classes, triggers, ...
      direct="src/${fileName}"                                # preserve any subfolders

      if [ -f "$direct" ]; then
        gitFile="$direct"
      else
        # If metadata type is known to have subfolders, keep the full relative path
        if grep -qx "$topType" "$SFCliMetaMetaHasFolder" 2>/dev/null; then
          [ -f "$direct" ] && gitFile="$direct"
        fi

        # Objects handled separately (keep nested SFDX-style folders)
        if [ -z "$gitFile" ] && [ "$topType" = "objects" ]; then
          [ -f "$direct" ] && gitFile="$direct"
        fi

        # Try an exact relative match anywhere under src (keeps folder structure)
        if [ -z "$gitFile" ]; then
          gitFile=$(find src -type f -path "*/$fileName" | head -n 1)
        fi

        # Fallbacks: basename and/or -meta.xml when appropriate
        if [ -z "$gitFile" ]; then
          base="$(basename "$fileName")"
          gitFile=$(find src -type f -iname "$base" | head -n 1)
        fi
        if [ -z "$gitFile" ]; then
          ext="${fileName##*.}"
          case "$ext" in
            cls|page|trigger|component) : ;;   # skip -meta.xml pairing for these
            *) candidate="src/${fileName}-meta.xml"; [ -f "$candidate" ] && gitFile="$candidate" ;;
          esac
        fi
      fi
      # -------- END FIX --------

      # Gainsboro git log line
      echo "        <tr><td class=\"pre mono gainsboro\">" >> "$HTMLLog"
      if [ -n "$gitFile" ]; then
        LastAuthor=$(git log -1 "$gitFile" 2>/dev/null | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g')
        echo "GIT log >>> $gitFile | $LastAuthor" >> "$HTMLLog"
      else
        echo "No Git log available for $fileName" >> "$HTMLLog"
      fi
      echo "        </td></tr>" >> "$HTMLLog"

      i=$((i+1))
    done

    cat >> "$HTMLLog" <<EOF
      </tbody></table>
    </div>
EOF
  fi

  # restore IFS
  IFS=$SAVEIFS

  # -------- Footer & close --------
  cat >> "$HTMLLog" <<EOF
    <div class="footer">This is the end of report.</div>
  </div>
</body>
</html>
EOF

  # -------- Send Email --------
  EMAIL=${FROM} mutt -e 'set content_type=text/html' \
    -s "---${SFDC_ORG}--- SF-CLI ChangeSet Deploy ${Report} [`TZ=IST date +%d.%b.%Y` IST - git ${gitlast}-${gitlatest} ]" "${mutt_MAIL_LIST}" < "$HTMLLog"
}
