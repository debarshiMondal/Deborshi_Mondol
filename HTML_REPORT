HTML_REPORT()
{
	Report=$1

	echo "<HTML>" > $HTMLLog
	echo "<BODY>" >> $HTMLLog
	echo "<table width=100% style=\"font-family:Arial,Helvetica,sans-serif;font-size:12px;line-height:1.4;\">" >> $HTMLLog
	
	if [ "${Report}" == "SUCCEEDED" ]
	then
		echo "<H3><tr><td bgcolor=\"SeaShell\" style=\"padding:8px 10px;\">${SFDC_ORG} deployment succeeded report</td></tr></H3>" >> $HTMLLog
 		echo "<H5><PRE><tr><td bgcolor=\"LightGreen\" style=\"padding:6px 8px;\">`egrep -A3 "Status: Succeeded" $LOG | sed 's/^/ /'`</td></tr></PRE></H5>" >> $HTMLLog

	elif [ "${Report}" == "FAILED" ]
	then
		echo "<H3><tr><td bgcolor=\"SeaShell\" style=\"padding:8px 10px;\">${SFDC_ORG} deployment failure report</td></tr></H3>" >> $HTMLLog
		echo "<H5><PRE><tr><td bgcolor=\"Khaki\" style=\"padding:6px 8px;\">`egrep -A3 "Status: Failed" $LOG | sed 's/^/ /'`</td></tr></PRE></H5>" >> $HTMLLog
	fi

	# Run details (kept as-is, just a tiny styling pad)
	echo "<tr><td bgcolor=\"LightBlue\" style=\"height:4px;\"></td></tr>" >> $HTMLLog
	echo "<tr><td style=\"padding:6px 8px;\">GIT Repo URL: $(git config --get remote.origin.url)</td></tr>" >> $HTMLLog
	echo "<tr><td style=\"padding:0 8px 6px 8px;\">Current Branch: $(git rev-parse --abbrev-ref HEAD)</td></tr>" >> $HTMLLog
	echo "<tr><td bgcolor=\"Yellow\" style=\"height:4px;\"></td></tr>" >> $HTMLLog

	# Original links (kept) — now rendered also as blue rounded “box links”
	OPEN_LOGS_URL="https://cdnsfdc.cadence.com/SFDC_GIT_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}"
	FORCE_DEPLOY_URL="https://cdnsfdc.cadence.com/SFDC_GIT_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/$(basename ${HTMLFDLog}).${DATE}"

	# Keep raw links (unchanged)
	echo "<tr><td style=\"padding:6px 8px;\"><a href=\"${OPEN_LOGS_URL}\">Log and changeset</a></td></tr>" >> $HTMLLog
	echo "<tr><td style=\"padding:0 8px 6px 8px;\"><a href=\"${FORCE_DEPLOY_URL}\">ForceDeploy</a></td></tr>" >> $HTMLLog

	# Add blue rounded “box links” version (white, underlined text) – purely UI, does not change logic
	echo "<tr><td style=\"padding:6px 8px 10px 8px;\">" >> $HTMLLog
	echo "  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tr>" >> $HTMLLog
	echo "    <td bgcolor=\"#0D47A1\" style=\"border-radius:8px;\"><a href=\"${OPEN_LOGS_URL}\" style=\"display:block;padding:6px 10px;font-weight:700;font-size:11px;color:#FFFFFF;text-decoration:underline;\">Open Logs</a></td>" >> $HTMLLog
	echo "    <td width=\"8\"></td>" >> $HTMLLog
	# Combined PMD points to your existing PMD root; if not desired, remove next two buttons
	echo "    <td bgcolor=\"#0D47A1\" style=\"border-radius:8px;\"><a href=\"https://cdnsfdc.cadence.com/PMDOUTPUT/${SFDC_ORG}\" style=\"display:block;padding:6px 10px;font-weight:700;font-size:11px;color:#FFFFFF;text-decoration:underline;\">Combined PMD</a></td>" >> $HTMLLog
	echo "    <td width=\"8\"></td>" >> $HTMLLog
	echo "    <td bgcolor=\"#0D47A1\" style=\"border-radius:8px;\"><a href=\"https://cdnsfdc.cadence.com/PMDOUTPUT/${SFDC_ORG}/combined.csv\" style=\"display:block;padding:6px 10px;font-weight:700;font-size:11px;color:#FFFFFF;text-decoration:underline;\">Download PMD CSV</a></td>" >> $HTMLLog
	echo "    <td width=\"8\"></td>" >> $HTMLLog
	echo "    <td bgcolor=\"#0D47A1\" style=\"border-radius:8px;\"><a href=\"${FORCE_DEPLOY_URL}\" style=\"display:block;padding:6px 10px;font-weight:700;font-size:11px;color:#FFFFFF;text-decoration:underline;\">Force Deploy File</a></td>" >> $HTMLLog
	echo "  </tr></table>" >> $HTMLLog
	echo "</td></tr>" >> $HTMLLog
	
	echo "<tr><td style=\"padding:6px 8px;\">API used: ${SetAPI}</td></tr>" >> $HTMLLog
	
	
	# -------- PMD (logic kept exactly; only link style underlined) --------
	if [ -f /tmp/CodeAnalysisReport.txt ]	
	then
		echo "<tr><td style=\"padding:6px 8px;\">No PMD code review generated because classes or triggers do not exist in changeSet</td></tr>" >> $HTMLLog
	else
		echo "<tr><td bgcolor=\"Salmon\" style=\"padding:6px 8px;\">PMD code review comments</td></tr>" >> $HTMLLog
		echo "<tr><td bgcolor=\"Lime\" style=\"padding:6px 8px;\"><a href=\"https://cdnsfdc.cadence.com/PMDOUTPUT/${SFDC_ORG}\" style=\"text-decoration:underline;\">Original PMD Report</a></td></tr>" >> $HTMLLog

		echo "<tr><td><table style=\"width:35%\" border=\"1\"><tr><th bgcolor=\"Cyan\">Class Name</th><th bgcolor=\"Cyan\">Original Warning Count - (High Severity Count) </th><th bgcolor=\"Cyan\">Current Warning Count - (High Severity Count) </th></tr>" >> $HTMLLog
		for classeName in `ls changeSetDeploy/force-app/main/default/classes/*.cls 2>/dev/null`
		do
			classeNameMod=`echo $classeName | sed 's/changeSetDeploy\/src\/classes\///g' |sed s/.cls/.cls_currpmd.html/`
			CurrseverityFile=`echo ${classeNameMod} | sed s/.cls_currpmd.html/.cls_currpmd.txt/`
			OrgseverityFile=`echo ${classeNameMod} | sed s/.cls_currpmd.html/.cls_orgpmd.txt/`
			OriginalPmd=`grep "Original PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$classeNameMod 2>/dev/null | cut -d ":" -f 2`
			Currentpmd=`grep "Current PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$classeNameMod 2>/dev/null | cut -d ":" -f 2`
			classeNameMod_mod=`echo ${classeNameMod} | sed s/.cls_currpmd.html//`
			pattern="ApexUnitTestShouldNotUseSeeAllDataTrue:\|UnusedLocalVariable:\|ClassNamingConventions:\|FieldDeclarationsShouldBeAtStart:\|FieldNamingConventions:\|FormalParameterNamingConventions:\|LocalVariableNamingConventions:\|MethodNamingConventions:\|PropertyNamingConventions:\|ExcessiveClassLength:\|ExcessiveParameterList:\|ApexDoc:\|ApexCSRF:\|AvoidDirectAccessTriggerMap:\|AvoidHardcodingId:\|AvoidNonExistentAnnotations:\|EmptyCatchBlock:\|EmptyIfStmt:\|EmptyStatementBlock:\|EmptyTryOrFinallyBlock:\|EmptyWhileStmt:\|InaccessibleAuraEnabledGetter:\|MethodWithSameNameAsEnclosingClass:\|OverrideBothEqualsAndHashcode:\|TestMethodsMustBeInTestClasses:\|AvoidDmlStatementsInLoops:\|AvoidSoqlInLoops:\|AvoidSoslInLoops:\|OperationWithLimitsInLoop:\|ApexBadCrypto:\|ApexDangerousMethods:\|ApexInsecureEndpoint:\|ApexOpenRedirect:\|ApexSharingViolations:\|ApexSOQLInjection:\|ApexSuggestUsingNamedCred:"
			CurrseverityCnt=`grep -o $pattern PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/classes/$CurrseverityFile 2>/dev/null | wc -l`
			OrgseverityCnt=`grep -o $pattern PMDReport/orgpmdoutput/src/classes/$OrgseverityFile 2>/dev/null | wc -l`
			if [ $CurrseverityCnt -gt $OrgseverityCnt ]
			then
				echo "<tr><th style=\"text-align:left\"><a href=\"https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$classeNameMod\" style=\"text-decoration:underline;\">$classeNameMod_mod</a></th><th style=\"text-align:right\" bgcolor=\"Tomato\">${OriginalPmd}-($OrgseverityCnt)</th><th style=\"text-align:right\" bgcolor=\"Tomato\">${Currentpmd}-($CurrseverityCnt)</th></tr>" >> $HTMLLog
			else
				echo "<tr><th style=\"text-align:left\"><a href=\"https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$classeNameMod\" style=\"text-decoration:underline;\">$classeNameMod_mod</a></th><th style=\"text-align:right\">${OriginalPmd}-($OrgseverityCnt)</th><th style=\"text-align:right\">${Currentpmd}-($CurrseverityCnt)</th></tr>" >> $HTMLLog
			fi
		done
		echo "</table></td></tr>" >> $HTMLLog

		echo "<tr><td><table style=\"width:35%\" border=\"1\"><tr><th bgcolor=\"Cyan\">Trigger Name</th><th bgcolor=\"Cyan\">Original Warning Count</th><th bgcolor=\"Cyan\">Current Warning Count</th></tr>" >> $HTMLLog
		for triggerName in `ls changeSetDeploy/force-app/main/default/triggers/*.trigger 2>/dev/null`
		do
			triggerNameMod=`echo $triggerName | sed 's/changeSetDeploy\/src\/triggers\///g' |sed s/.trigger/.trigger_currpmd.html/`
			OriginalPmd=`grep "Original PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$triggerNameMod 2>/dev/null | cut -d ":" -f 2`
			Currentpmd=`grep "Current PMD Warnings Total" /data/public/pmd_rule/$SFDC_ORG/$triggerNameMod 2>/dev/null | cut -d ":" -f 2`
			triggerNameMod_mod=`echo ${triggerNameMod} | sed s/.trigger_currpmd.html// `
			echo "<tr><th style=\"text-align:left\"><a href=\"https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/$triggerNameMod\" style=\"text-decoration:underline;\">$triggerNameMod_mod</a></th><th style=\"text-align:right\">${OriginalPmd}</th><th style=\"text-align:right\">${Currentpmd}</th></tr>" >> $HTMLLog
		done
		echo "</table></td></tr>" >> $HTMLLog
	fi

	SAVEIFS=$IFS
	IFS=$(echo -en "\n\b")
	
	if [ "${Report}" == "SUCCEEDED" ]
	then
		# (Original success listing logic unchanged)
		find changeSetDeploy/force-app/main/default -type f | \
		egrep -v "customSettings|staticResourceFolders.txt" | \
		sed 's|^changeSetDeploy/force-app/main/default|src|' | sort -u > ${DEPLOYEDFILE}

		changesetFile=$(find changeSetDeploy/force-app/main/default -type f | egrep -v "customSettings|staticResourceFolders.txt" | wc -l)
		echo "<tr><td bgcolor=\"SeaShell\" style=\"padding:6px 8px;\">Changeset file/s ...[${changesetFile}]</td></tr>" >> $HTMLLog

		NUM=1
		for FILE in `cat ${DEPLOYEDFILE}`
		do
			if [ "${FILE}" == "src/labels/CustomLabels.labels-meta.xml" ]
			then
				FILE=src/env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml
			elif [ ! -z "$(echo $FILE | grep ^"customSettings")" ]
			then
				FILE=$(echo "${FILE}" | sed -e 's/^customSettings\///g')
			elif [[ "${FILE}" =~ "src/remoteSiteSettings/" ]]
			then
				FILE=$(echo "${FILE}" | sed -e "s/^src/src\/env\/${SFDC_ORG}/g")
			elif [[ "${FILE}" =~ "src/customMetadata/" ]]
			then
				FILE=$(echo "${FILE}" | sed -e "s/^src/src\/env\/${SFDC_ORG}/g")
			fi

			echo "<tr><td bgcolor=\"LightGreen\"><PRE style=\"margin:0;\"> " >> $HTMLLog
			echo " [$((NUM++))] ${FILE}" >> ${HTMLLog}
			echo "</PRE></td></tr>" >> $HTMLLog
			LastAuthor=`git log -1 ${FILE} 2>/dev/null | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g'`
			echo "<tr><td bgcolor=\"Gainsboro\"><PRE style=\"margin:0;\">Last author... ${LastAuthor}</PRE></td></tr>" >> $HTMLLog
		done
		echo "</table>" >> $HTMLLog

	elif [ "${Report}" == "FAILED" ]
	then
		# Title row
		echo "<tr><td bgcolor=\"SeaShell\" style=\"padding:6px 8px;\">All Component Failures:</td></tr>" >> "$HTMLLog"

		i=1
		for failure in $(jq -c '.result.details.componentFailures[]' "$LOG.filtered"); do
			fileName=$(echo "$failure" | jq -r '.fileName')
			errorMsg=$(echo "$failure" | jq -r '.problem')

			sanitizedErrorMsg=$(echo "$errorMsg" | tr '\n' ' ' | tr '\r' ' ' | sed -e 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')

			# --- Resolve repo file to fix foldered metadata/object display paths (UI-only) ---
			gitFile=$(find src -type f -path "*/$fileName" | head -n 1)
			if [ -z "$gitFile" ]; then
				base="$(basename "$fileName")"
				gitFile=$(find src -type f -iname "$base" | head -n 1)
			fi
			# For single-file types, try mate -meta.xml
			if [ -z "$gitFile" ]; then
				ext="${fileName##*.}"
				case "$ext" in cls|page|trigger|component) : ;; *)
					[ -f "src/${fileName}-meta.xml" ] && gitFile="src/${fileName}-meta.xml"
				;;
				esac
			fi
			# Derive display path from repo file if found, else fall back to API-provided fileName
			if [ -n "$gitFile" ]; then
				displayPath="${gitFile#src/}"
			else
				displayPath="$fileName"
			fi

			# Khaki error line (with corrected path if available)
			echo "<tr><td bgcolor=\"Khaki\"><PRE style=\"margin:0;\">$i. ${displayPath} -- Error: $sanitizedErrorMsg</PRE></td></tr>" >> "$HTMLLog"

			# Gainsboro git log (unchanged)
			echo "<tr><td bgcolor=\"Gainsboro\"><PRE style=\"margin:0;\">" >> "$HTMLLog"
			if [ -n "$gitFile" ]; then
				LastAuthor=$(git log -1 "$gitFile" 2>/dev/null | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g')
				echo "GIT log >>> $gitFile" >> "$HTMLLog"
				echo "$LastAuthor" >> "$HTMLLog"
			else
				echo "No Git log available for $fileName" >> "$HTMLLog"
			fi
			echo "</PRE></td></tr>" >> "$HTMLLog"

			i=$((i+1))
		done
		echo "</table>" >> "$HTMLLog"

	elif [ "${Report}" == "LOCKED" ]
    then
		echo "<H3><tr><td bgcolor=\"SeaShell\" style=\"padding:8px 10px;\">${SFDC_ORG} is Locked</td></tr></H3>" >> $HTMLLog
		echo "<H5><PRE><tr><td bgcolor=\"LightYellow\" style=\"padding:6px 8px;\">`grep ALREADY_IN_PROCESS ${LOG} | cut -d ":" -f 3-100`</td></tr></PRE></H5>" >> $HTMLLog		

    elif [ "${Report}" == "EXCEEDED_MAX_SIZE_REQUEST" ]
    then
        echo "<H3><tr><td bgcolor=\"SeaShell\" style=\"padding:8px 10px;\">${SFDC_ORG} EXCEEDED_MAX_SIZE_REQUEST </td></tr></H3>" >> $HTMLLog
        echo "<H5><PRE><tr><td bgcolor=\"LightYellow\" style=\"padding:6px 8px;\">`grep EXCEEDED_MAX_SIZE_REQUEST ${LOG} | cut -d ":" -f 3-100`</td></tr></PRE></H5>" >> $HTMLLog

	elif [ "${Report}" == "UNKNOWN_EXCEPTION" ]
	then
		echo "<H3><tr><td bgcolor=\"SeaShell\" style=\"padding:8px 10px;\">${SFDC_ORG} UNKNOWN_EXCEPTION </td></tr></H3>" >> $HTMLLog
        echo "<H5><PRE><tr><td bgcolor=\"LightYellow\" style=\"padding:6px 8px;\">`grep UNKNOWN_EXCEPTION ${LOG} | cut -d ":" -f 3-100`</td></tr></PRE></H5>" >> $HTMLLog

	elif [ "${Report}" == "Failed_to_send_request" ]
	then
	  	echo "<H3><tr><td bgcolor=\"SeaShell\" style=\"padding:8px 10px;\">${SFDC_ORG} Failed to send request </td></tr></H3>" >> $HTMLLog
	    echo "<H5><PRE><tr><td bgcolor=\"LightYellow\" style=\"padding:6px 8px;\">$(grep Error ${LOG})</td></tr></PRE></H5>" >> $HTMLLog
	fi

	#restore IFS
	IFS=$SAVEIFS
	echo "</table></BODY></HTML>" >> $HTMLLog
	
	EMAIL=${FROM} mutt -e 'set content_type=text/html' \
	-s "---${SFDC_ORG}--- SF-CLI ChangeSet Deploy ${Report} [`TZ=IST date +%d.%b.%Y` IST - git ${gitlast}-${gitlatest} ]" "${mutt_MAIL_LIST}" < $HTMLLog
}
