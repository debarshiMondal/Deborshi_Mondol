HTML_REPORT() {
  Report=$1

  : > "$HTMLLog"

  # ---- config / prerequisites ----
  UI_COLORS_JSONC=${property}/ui_colors.jsonc
  UI_COLORS_JSONC="${UI_COLORS_JSONC:-ui_colors.jsonc}"
  UI_COLORS_JSON_STRICT="/tmp/ui_colors.$$.$RANDOM.json"

  _esc(){ sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'; }
  _fatal(){
    echo "[FATAL] $1"
    printf "%s\n" "[FATAL] $1" | mutt -s "---${SFDC_ORG}--- UI Color Config Error" "${mutt_MAIL_LIST}" 2>/dev/null
    rm -f "$UI_COLORS_JSON_STRICT" 2>/dev/null
    exit 1
  }

  command -v jq >/dev/null 2>&1 || _fatal "jq not found (needed for UI colors)."
  [ -f "$UI_COLORS_JSONC" ] || _fatal "UI colors JSONC not found at: $UI_COLORS_JSONC"

  # strip JSONC comments -> strict JSON
  sed -E ':a; s@/\*[^*]*\*+([^/*][^*]*\*+)*/@@g; ta' "$UI_COLORS_JSONC" \
  | sed -E 's@\r$@@' \
  | sed -E 's@//[[:space:]]*.*$@@' \
  | sed '/^[[:space:]]*$/d' > "$UI_COLORS_JSON_STRICT" \
  || _fatal "Failed producing strict JSON from $UI_COLORS_JSONC"

  [ -s "$UI_COLORS_JSON_STRICT" ] || _fatal "Empty strict JSON after stripping ($UI_COLORS_JSONC)."
  jq empty "$UI_COLORS_JSON_STRICT" >/dev/null 2>&1 || _fatal "ui_colors.jsonc invalid after stripping comments."

  HEX_RE='^#[0-9A-Fa-f]{6}$'
  _getc(){ jq -r "$1 // empty" "$UI_COLORS_JSON_STRICT"; }
  _ishex(){ [[ "$1" =~ $HEX_RE ]]; }

  required_keys=(
    '.header.success_bg' '.header.failure_bg' '.header.text'
    '.plate.page_bg' '.plate.background' '.plate.border'
    '.run_details.strip_success_bg' '.run_details.strip_failure_bg' '.run_details.title_text'
    '.chips.success_bg' '.chips.failure_bg' '.chips.success_text' '.chips.failure_text' '.chips.border'
    '.quick_links.tile_1_bg' '.quick_links.tile_2_bg' '.quick_links.tile_3_bg' '.quick_links.tile_4_bg' '.quick_links.text' '.quick_links.gap_px'
    '.status_summary.deployment_success_bg' '.status_summary.deployment_failure_bg'
    '.status_summary.pmd_bg' '.status_summary.time_bg'
    '.status_summary.title_text' '.status_summary.label_text' '.status_summary.value_text' '.status_summary.corner_radius'
    '.pmd_review.header_bg' '.pmd_review.header_text' '.pmd_review.row_border'
    '.pmd_review.link_normal' '.pmd_review.link_high' '.pmd_review.text_high' '.pmd_review.text_normal'
    '.success_section.file_row_bg' '.success_section.file_row_border' '.success_section.author_row_bg' '.success_section.author_row_border' '.success_section.title_text'
    '.failure_section.error_row_bg' '.failure_section.error_row_border' '.failure_section.author_row_bg' '.failure_section.author_row_border' '.failure_section.title_text'
    '.footer.bg' '.footer.text'
  )
  bad=0
  for k in "${required_keys[@]}"; do
    v=$(_getc "$k")
    if [ -z "$v" ]; then
      if [[ "$k" == .success_section* ]]; then
        case "$k" in
          *.file_row_bg)       v=$(_getc '.changeset.file_row_bg');;
          *.file_row_border)   v=$(_getc '.changeset.file_row_border');;
          *.author_row_bg)     v=$(_getc '.changeset.author_row_bg');;
          *.author_row_border) v=$(_getc '.changeset.author_row_border');;
          *.title_text)        v=$(_getc '.changeset.title_text');;
        esac
      elif [[ "$k" == .failure_section* ]]; then
        case "$k" in
          *.error_row_bg)      v=$(_getc '.failures.error_row_bg');;
          *.error_row_border)  v=$(_getc '.failures.error_row_border');;
          *.author_row_bg)     v=$(_getc '.failures.author_row_bg');;
          *.author_row_border) v=$(_getc '.failures.author_row_border');;
          *.title_text)        v=$(_getc '.failures.title_text');;
        esac
      fi
    fi
    if [[ "$k" =~ gap_px|corner_radius ]]; then
      [ -n "$v" ] || { echo "[FATAL] Missing value for $k"; bad=1; }
    else
      _ishex "$v" || { echo "[FATAL] Missing/invalid color for key $k"; bad=1; }
    fi
  done
  [ $bad -eq 0 ] || _fatal "ui_colors.jsonc failed validation."

  # ---- read colors ----
  _hdr_s=$(_getc '.header.success_bg'); _hdr_f=$(_getc '.header.failure_bg'); _hdr_txt=$(_getc '.header.text')
  _page_bg=$(_getc '.plate.page_bg'); _plate_bg=$(_getc '.plate.background'); _plate_border=$(_getc '.plate.border')
  _run_s=$(_getc '.run_details.strip_success_bg'); _run_f=$(_getc '.run_details.strip_failure_bg'); _run_title=$(_getc '.run_details.title_text')
  _chip_bg_s=$(_getc '.chips.success_bg'); _chip_bg_f=$(_getc '.chips.failure_bg'); _chip_txt_s=$(_getc '.chips.success_text'); _chip_txt_f=$(_getc '.chips.failure_text'); _chip_border=$(_getc '.chips.border')
  _ql1=$(_getc '.quick_links.tile_1_bg'); _ql2=$(_getc '.quick_links.tile_2_bg'); _ql3=$(_getc '.quick_links.tile_3_bg'); _ql4=$(_getc '.quick_links.tile_4_bg'); _ql_text=$(_getc '.quick_links.text'); _ql_gap=$(_getc '.quick_links.gap_px')
  _status_s=$(_getc '.status_summary.deployment_success_bg'); _status_f=$(_getc '.status_summary.deployment_failure_bg'); _status_pmd=$(_getc '.status_summary.pmd_bg'); _status_time=$(_getc '.status_summary.time_bg')
  _status_title=$(_getc '.status_summary.title_text'); _status_label=$(_getc '.status_summary.label_text'); _status_value=$(_getc '.status_summary.value_text'); _status_radius=$(_getc '.status_summary.corner_radius')
  _pmd_hdr_bg=$(_getc '.pmd_review.header_bg'); _pmd_hdr_text=$(_getc '.pmd_review.header_text'); _pmd_row_border=$(_getc '.pmd_review.row_border'); _pmd_link_normal=$(_getc '.pmd_review.link_normal'); _pmd_link_high=$(_getc '.pmd_review.link_high'); _pmd_text_high=$(_getc '.pmd_review.text_high'); _pmd_text_normal=$(_getc '.pmd_review.text_normal')
  # ---- CORRECTED LINE ----
  _succ_file_bg=$(_getc '.success_section.file_row_bg'); _succ_file_border=$(_getc '.success_section.file_row_border'); _succ_auth_bg=$(_getc '.success_section.author_row_bg'); _succ_auth_border=$(_getc '.success_section.author_row_border'); _succ_title=$(_getc '.success_section.title_text')
  _fail_err_bg=$(_getc '.failure_section.error_row_bg'); _fail_err_border=$(_getc '.failure_section.error_row_border'); _fail_auth_bg=$(_getc '.failure_section.author_row_bg'); _fail_auth_border=$(_getc '.failure_section.author_row_border'); _fail_title=$(_getc '.failure_section.title_text')
  _foot_bg=$(_getc '.footer.bg'); _foot_text=$(_getc '.footer.text')

  # ---- runtime values ----
  _RUN_IST="$(TZ=Asia/Kolkata date +'%d.%b.%Y %H:%M IST')"
  _API="${SetAPI:-N/A}"
  _BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo N/A)"
  _REPO="$(git config --get remote.origin.url 2>/dev/null || echo N/A)"     # full URL (per request)
  #_REQID="$(jq -r '.result.id // .result.operationId // empty' "$LOG.filtered" 2>/dev/null)"
  #[ -n "$_REQID" ] || _REQID="${REQUEST_ID:-${DEPLOYMENT_ID:-${DEPLOY_ID:-N/A}}}"

  _REQID=""
  if [ -f "$LOG" ]; then
    _REQID="$(grep -m1 -E "Deploy ID[[:space:]]*:" "$LOG" | xargs | cut -d: -f2- | cut "-d " -f2-)"
  fi
  # DEPLOY USER should display Target Org from $LOG (fallbacks kept)
  _DEPUSER=""
  if [ -f "$LOG" ]; then
    _DEPUSER="$(grep -m1 -E "Target Org[[:space:]]*:" "$LOG" | xargs | cut -d: -f2- | cut "-d " -f2-)"
  fi
 # [ -n "$_DEPUSER" ] || _DEPUSER="$(jq -r '.result.username // empty' "$LOG.filtered" 2>/dev/null)"
 # [ -n "$_DEPUSER" ] || _DEPUSER="${SF_USERNAME:-${SFDC_ORG:-${USER:-unknown}}}"

  # Component pass/fail counts
  if [ -f "$LOG.filtered" ]; then
    COMP_PASS="$(jq -r 'try (.result.details.componentSuccesses|length) catch 0' "$LOG.filtered" 2>/dev/null)"
    COMP_FAIL="$(jq -r 'try (.result.details.componentFailures|length) catch 0' "$LOG.filtered" 2>/dev/null)"
  else
    COMP_PASS="$(find changeSetDeploy/force-app/main/default -type f | egrep -v 'customSettings|staticResourceFolders.txt' | wc -l | xargs)"
    COMP_FAIL=0
  fi

  # Load PMD patterns from property file (no code change later needed)
  PAT_FILE="build/property/pmd_high_patterns.txt"
  pattern="$(grep -Ehv '^\s*($|#)' "$PAT_FILE" | tr -d '\r' | paste -sd'|' -)"
  [ -n "$pattern" ] || _fatal "PMD patterns file is empty: $PAT_FILE"

  # PMD counts (classes / triggers and total High severity matches)
  CLASS_COUNT=$(ls changeSetDeploy/force-app/main/default/classes/*.cls 2>/dev/null | wc -l | xargs)
  TRIGGER_COUNT=$(ls changeSetDeploy/force-app/main/default/triggers/*.trigger 2>/dev/null | wc -l | xargs)

  _sum_grep_matches() {
    local dir="$1"
    local total=0 n
    if [ -d "$dir" ]; then
      # count lines with any high-sev pattern (more robust than -o on some grep builds)
      n=$(find "$dir" -maxdepth 1 -type f -name '*.txt' -print0 2>/dev/null \
          | xargs -0 -r grep -Eh "$pattern" 2>/dev/null | wc -l | xargs)
      total=$(( total + ${n:-0} ))
    fi
    echo "$total"
  }
  PMD_HIGH_CLS=$(_sum_grep_matches "PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/classes")
  PMD_HIGH_TRG=$(_sum_grep_matches "PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/triggers")
  PMD_HIGH_TOTAL=$(( PMD_HIGH_CLS + PMD_HIGH_TRG ))

  # Deployment start/end/time-only + duration (prefer captured IST envs)
  # The START_TIME_IST and END_TIME_IST variables are now expected to be set before this function is called.

  # Fallback: If times are not set, try to find them in the log file
  if [ -z "$START_TIME_IST" ] && [ -f "$deployLogFile" ]; then
    START_TIME_IST="$(tac "$deployLogFile" | grep -m1 'Build Start Time - ' | sed 's/.* - //')"
  fi
  if [ -z "$END_TIME_IST" ] && [ -f "$deployLogFile" ]; then
    END_TIME_IST="$(tac "$deployLogFile" | grep -m1 'Build End Time - ' | sed 's/.* - //')"
  fi

  _time_only(){ # prints like 04:10 PM IST (fallback to raw if parse fails)
    local ts="$1"
    [ -n "$ts" ] || { echo ""; return; }
    TZ=Asia/Kolkata date -d "$ts" +'%I:%M %p IST' 2>/dev/null || echo "$ts"
  }

  START_TIME_IST_ONLY="$(_time_only "$START_TIME_IST")"
  END_TIME_IST_ONLY="$(_time_only "$END_TIME_IST")"

  # Calculate total duration if both start and end times are available
  if [ -n "$START_TIME_IST" ] && [ -n "$END_TIME_IST" ]; then
    _start_sec=$(TZ=Asia/Kolkata date -d "$START_TIME_IST" +%s 2>/dev/null || echo "")
    _end_sec=$(TZ=Asia/Kolkata date -d "$END_TIME_IST" +%s 2>/dev/null || echo "")
    if [ -n "$_start_sec" ] && [ -n "$_end_sec" ]; then
      _dur=$(( _end_sec - _start_sec ))
      _h=$((_dur/3600)); _m=$(((_dur%3600)/60)); _s=$((_dur%60))
      TOTAL_DURATION=$(printf "%02dh:%02dm:%02ds" "$_h" "$_m" "$_s")
    else
      TOTAL_DURATION="${TOTAL_DURATION:-N/A}"
    fi
  else
    TOTAL_DURATION="${TOTAL_DURATION:-N/A}"
  fi

  # Last resort: If failed and times are still missing, take them from the deploy JSON
  if [ "$Report" != "SUCCEEDED" ] && [ -f "$LOG.filtered" ] && { [ -z "$START_TIME_IST" ] || [ -z "$END_TIME_IST" ]; }; then
    JSON_CREATED="$(jq -r '.result.createdDate // empty' "$LOG.filtered" 2>/dev/null)"
    JSON_COMPLETED="$(jq -r '.result.completedDate // empty' "$LOG.filtered" 2>/dev/null)"
    if [ -n "$JSON_CREATED" ]; then
        START_TIME_IST="$(TZ=Asia/Kolkata date -d "$JSON_CREATED" +'%m/%d/%Y %I:%M:%S %p IST')"
    fi
    if [ -n "$JSON_COMPLETED" ]; then
        END_TIME_IST="$(TZ=Asia/Kolkata date -d "$JSON_COMPLETED"  +'%m/%d/%Y %I:%M:%S %p IST')"
    fi
    
    START_TIME_IST_ONLY="$(_time_only "$START_TIME_IST")"
    END_TIME_IST_ONLY="$(_time_only "$END_TIME_IST")"
    _start_sec=$(TZ=Asia/Kolkata date -d "$START_TIME_IST" +%s 2>/dev/null || echo "")
    _end_sec=$(TZ=Asia/Kolkata date -d "$END_TIME_IST" +%s 2>/dev/null || echo "")
    if [ -n "$_start_sec" ] && [ -n "$_end_sec" ]; then
        _dur=$(( _end_sec - _start_sec ))
        _h=$((_dur/3600)); _m=$(((_dur%3600)/60)); _s=$((_dur%60))
        TOTAL_DURATION=$(printf "%02dh:%02dm:%02ds" "$_h" "$_m" "$_s")
    fi
  fi
  

  OPEN_LOGS_URL="https://cdnsfdc.cadence.com/SFDC_GIT_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}"
  ORIG_PMD_URL="https://cdnsfdc.cadence.com/PMDOUTPUT/${SFDC_ORG}"
  FORCE_DEPLOY_URL="https://cdnsfdc.cadence.com/SFDC_GIT_LOG/${SFDC_ORG}.GIT_${gitlast}-${gitlatest}.${DATE}/$(basename "${HTMLFDLog:-$HTMLLog}").${DATE}"

  # theme per outcome
  if [ "$Report" = "SUCCEEDED" ]; then
    _hdr_bg="$_hdr_s"; _run_strip="$_run_s"; _status_bg="$_status_s"; _chip_bg="$_chip_bg_s"; _chip_txt="$_chip_txt_s"
  else
    _hdr_bg="$_hdr_f"; _run_strip="$_run_f"; _status_bg="$_status_f"; _chip_bg="$_chip_bg_f"; _chip_txt="$_chip_txt_f"
  fi

  # ---- helper: resolve JSON fileName -> src path (for failure author logs) ----
  resolve_src_from_json_name() {
    local jname="$1" stem f_cs f_src
    stem="$(basename "${jname}")"; stem="${stem%.*}"

    f_cs="$(find changeSetDeploy/force-app/main/default -type f -name "${stem}.*" -o -type d -name "${stem}" 2>/dev/null | head -n1)"
    if [ -n "$f_cs" ] && [ -d "$f_cs" ]; then
      f_cs="$(find "$f_cs" -type f -name "${stem}.*" 2>/dev/null | head -n1)"
    fi
    if [ -z "$f_cs" ] && [ -f "$SFCliBuildList" ]; then
      f_cs="$(grep -F "/${stem}." "$SFCliBuildList" | head -n1)"
    fi
    if [ -z "$f_cs" ]; then
      f_cs="$(find src -type f -name "${stem}.*" 2>/dev/null | head -n1)"
    fi
    [ -z "$f_cs" ] && return 1

    if [[ "$f_cs" == changeSetDeploy/force-app/main/default/* ]]; then
      f_src="${f_cs/changeSetDeploy\/force-app\/main\/default/src}"
    else
      f_src="$f_cs"
    fi

    case "$f_src" in
      src/labels/CustomLabels.labels-meta.xml)
        f_src="src/env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml"
        ;;
      src/customMetadata/*|src/remoteSiteSettings/*)
        f_src="${f_src/src/src\/env\/${SFDC_ORG}}"
        ;;
    esac

    printf '%s\n' "$f_src"
  }

  # ---- HTML head/top ----
  cat >>"$HTMLLog" <<HTML_TOP
<!DOCTYPE html><html><head><meta charset="utf-8">
<style type="text/css">
  a.cta { text-decoration:none !important; color:${_ql_text} !important; }
  a.cta:hover { text-decoration:underline !important; }
</style>
</head>
<body style="margin:0;padding:0;background:${_page_bg};">
<table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%" style="background:${_page_bg};"><tr><td align="center">
HTML_TOP

  # Header
  cat >>"$HTMLLog" <<EOF
  <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="1100" style="max-width:1100px;margin:8px auto;">
    <tr>
      <td style="background:${_hdr_bg};padding:4px 8px;color:${_hdr_txt};font:bold 16px Arial,Helvetica,sans-serif;line-height:18px;">
        ${SFDC_ORG} Deployment $([ "$Report" = "SUCCEEDED" ] && echo "Success" || echo "Failure") Report
      </td>
    </tr>
  </table>
EOF

  # Plate open
  cat >>"$HTMLLog" <<EOF
  <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="1100" style="max-width:1100px;background:${_plate_bg};border:1px solid ${_plate_border};">
    <tr><td style="padding:12px 14px;">
EOF

  # Run Details + chips
  cat >>"$HTMLLog" <<EOF
  <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%"
         style="background:${_run_strip};border-radius:10px;">
    <tr><td style="padding:4px 10px 2px 10px;font:800 12px Arial;color:${_run_title};line-height:14px;">Run Details</td></tr>
    <tr><td style="padding:0 8px 6px 8px;">
      <table role="presentation" cellpadding="0" cellspacing="0" border="0" style="margin:0;padding:0;">
        <tr style="height:32px;line-height:32px;">
EOF

  _chip_auto(){ # $1=label, $2=value
    cat >>"$HTMLLog" <<EOF
          <td style="padding:0 5px 0 0;">
            <table role="presentation" cellpadding="0" cellspacing="0" border="0" style="border:1px solid ${_chip_border};background:${_chip_bg};">
              <tr>
                <td height="32" valign="middle" nowrap style="height:32px;line-height:14px;padding:0 8px;">
                  <div style="font:10px Arial;color:${_chip_txt};white-space:nowrap;">$1</div>
                  <div style="font:bold 12px Arial;color:${_chip_txt};white-space:nowrap;">$2</div>
                </td>
              </tr>
            </table>
          </td>
EOF
  }

  _chip_auto "RUN (IST)"   "$(_esc <<<"$_RUN_IST")"
  _chip_auto "ORG NAME"    "$(_esc <<<"$SFDC_ORG")"
  _chip_auto "API"         "$(_esc <<<"$_API")"
  _chip_auto "BRANCH"      "$(_esc <<<"$_BRANCH")"
  _chip_auto "REPO"        "$(_esc <<<"$_REPO")"
  _chip_auto "REQUEST ID"  "$(_esc <<<"$_REQID")"
  _chip_auto "DEPLOY USER" "$(_esc <<<"$_DEPUSER")"

  cat >>"$HTMLLog" <<'EOF'
        </tr>
      </table>
    </td></tr>
  </table>
EOF

  # small gap
  echo '<table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td style="height:8px;line-height:8px;font-size:0;">&nbsp;</td></tr></table>' >>"$HTMLLog"

  # Quick Links
  GAP=$(( ${_ql_gap:-6} + 6 ))
  cat >>"$HTMLLog" <<EOF
  <!--[if gte mso 9]>
  <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%">
  <tr>
  <td width="1100" align="left">
  <![endif]-->
  <div style="white-space:nowrap; overflow:auto;">
  <table role="presentation" cellpadding="0" cellspacing="0" border="0" style="display:inline-block; white-space:nowrap;">
    <tr style="height:22px;">
      <td style="padding:0 ${GAP}px 0 0;">
        <table role="presentation" cellpadding="0" cellspacing="0" border="0" style="background:${_ql1};">
          <tr><td height="22" style="height:22px;padding:0 10px;line-height:22px;">
            <a class="cta" href="${OPEN_LOGS_URL}" style="font:bold 12px Arial;">Open&nbsp;Logs</a>
          </td></tr>
        </table>
      </td>
      <td style="padding:0 ${GAP}px 0 0;">
        <table role="presentation" cellpadding="0" cellspacing="0" border="0" style="background:${_ql2};">
          <tr><td height="22" style="height:22px;padding:0 10px;line-height:22px;">
            <a class="cta" href="${ORIG_PMD_URL}" style="font:bold 12px Arial;">Combined&nbsp;Original&nbsp;PMD</a>
          </td></tr>
        </table>
      </td>
      <td style="padding:0 ${GAP}px 0 0;">
        <table role="presentation" cellpadding="0" cellspacing="0" border="0" style="background:${_ql3};">
          <tr><td height="22" style="height:22px;padding:0 10px;line-height:22px;">
            <a class="cta" href="#" style="font:bold 12px Arial;">Combined&nbsp;Current&nbsp;PMD</a>
          </td></tr>
        </table>
      </td>
      <td style="padding:0;">
        <table role="presentation" cellpadding="0" cellspacing="0" border="0" style="background:${_ql4};">
          <tr><td height="22" style="height:22px;padding:0 10px;line-height:22px;">
            <a class="cta" href="${FORCE_DEPLOY_URL}" style="font:bold 12px Arial;">ForceDeploy</a>
          </td></tr>
        </table>
      </td>
    </tr>
  </table>
  </div>
  <!--[if gte mso 9]>
  </td>
  </tr>
  </table>
  <![endif]-->
EOF

  # Status Summary tiles
  _status_counts_html() {
    if [ "$Report" = "SUCCEEDED" ]; then
      echo "Passed: ${COMP_PASS}"
    else
      echo "Passed: ${COMP_PASS} &nbsp; • &nbsp; Failed: ${COMP_FAIL}"
    fi
  }
  # --- CHANGED: always show Classes/Triggers counts; no special 0/0 prose ---
  _pmd_summary_html() {
      echo "<div style=\"font:bold 13px Arial;color:${_status_value};\">Classes: ${CLASS_COUNT} &nbsp; • &nbsp; Triggers: ${TRIGGER_COUNT}</div>"
      echo "<div style=\"font:12px Arial;color:${_status_value};\">High (Classes): ${PMD_HIGH_CLS} &nbsp; • &nbsp; High (Triggers): ${PMD_HIGH_TRG}</div>"
  }

  cat >>"$HTMLLog" <<EOF
  <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%">
    <tr><td style="padding:6px 4px 4px 4px;font:800 13px Arial;color:${_status_title};">STATUS SUMMARY</td></tr>
  </table>
  <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%">
    <tr>
      <td width="33%" valign="top" style="padding:4px;">
        <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%" height="92" style="background:${_status_bg};border-radius:${_status_radius};">
          <tr><td style="padding:8px;" valign="top">
            <div style="font:10px Arial;color:${_status_label};">DEPLOYMENT</div>
            <div style="font:bold 14px Arial;color:${_status_value};">$([ "$Report" = "SUCCEEDED" ] && echo "Succeeded" || echo "Failed")</div>
            <div style="font:12px Arial;color:${_status_value};">$(_status_counts_html)</div>
          </td></tr>
        </table>
      </td>
      <td width="33%" valign="top" style="padding:4px;">
        <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%" height="92" style="background:${_status_pmd};border-radius:${_status_radius};">
          <tr><td style="padding:8px;" valign="top">
            <div style="font:10px Arial;color:${_status_label};">PMD — CURRENT CHANGESET</div>
            $(_pmd_summary_html)
          </td></tr>
        </table>
      </td>
      <td width="33%" valign="top" style="padding:4px;">
        <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="100%" height="92" style="background:${_status_time};border-radius:${_status_radius};">
          <tr><td style="padding:8px;" valign="top">
            <div style="font:10px Arial;color:${_status_label};">DEPLOYMENT DURATION</div>
            <div style="font:bold 14px Arial;color:${_status_value};">${TOTAL_DURATION}</div>
            <div style="font:12px Arial;color:${_status_value};">Start: ${START_TIME_IST_ONLY:-N/A} &nbsp; • &nbsp; End: ${END_TIME_IST_ONLY:-N/A}</div>
          </td></tr>
        </table>
      </td>
    </tr>
  </table>
EOF

  # =========================
  # PMD REVIEW (conditional)
  # =========================
  # helper for Δ pill (Outlook-safe)
  _delta_pill(){ # $1=delta (int)
    local d="$1" bg="#eeeeee" bd="#dddddd" col="${_pmd_text_normal}" txt="$d"
    [ "$d" -gt 0 ] && { bg="#ffe3e3"; bd="#f5bcbc"; col="#b71c1c"; txt="+$d"; }
    [ "$d" -lt 0 ] && { bg="#e4f4e7"; bd="#bde0c0"; col="#1b5e20"; }
    cat <<PILL
<table role="presentation" cellpadding="0" cellspacing="0" border="0" style="display:inline-block;border:1px solid $bd;background:$bg;">
  <tr><td style="font:bold 11px Arial;color:$col;padding:1px 6px;white-space:nowrap;">$txt</td></tr>
</table>
PILL
  }

  if [ "$CLASS_COUNT" -eq 0 ] && [ "$TRIGGER_COUNT" -eq 0 ]; then
    : # no PMD REVIEW section when both 0 — tile already communicates 0/0
  else
    # Header + tiny legend (Outlook-safe)
    echo "<table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\"><tr><td style=\"padding:18px 4px 6px 4px;font:800 16px Arial;color:${_status_title};\">PMD REVIEW</td></tr></table>" >>"$HTMLLog"
    echo "<table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\"><tr><td style=\"padding:0 4px 10px 4px;font:11px Arial;color:${_status_label};\">Legend: <span style=\"background:#ffefef;border:1px solid #f0caca;padding:1px 6px;\">Δ&gt;0</span> regression &nbsp; <span style=\"background:#ecf7ef;border:1px solid #c8e6ca;padding:1px 6px;\">Δ&lt;0</span> improvement</td></tr></table>" >>"$HTMLLog"

    # --- CLASSES table only if present ---
    if [ "$CLASS_COUNT" -gt 0 ]; then
      echo "<table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"border:1px solid ${_pmd_row_border}; border-collapse:collapse;\">" >>"$HTMLLog"
      echo "<thead><tr style=\"background:${_pmd_hdr_bg};\"><th align=\"left\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">CLASS NAME</th><th align=\"right\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">ORIGINAL (HIGH)</th><th align=\"right\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">CURRENT (HIGH)</th><th align=\"right\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">Δ HIGH</th><th align=\"left\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">AUTHOR</th></tr></thead><tbody>" >>"$HTMLLog"
      
      row_num=0
      for classePath in $(ls changeSetDeploy/force-app/main/default/classes/*.cls 2>/dev/null); do
        base="$(basename "$classePath" .cls)"
        currTxt="${base}.cls_currpmd.txt"
        orgTxt="${base}.cls_orgpmd.txt"

        pmd_html="/data/public/pmd_rule/$SFDC_ORG/${base}.cls_currpmd_orgpm.html"
        [ -f "$pmd_html" ] || pmd_html="/data/public/pmd_rule/$SFDC_ORG/${base}.cls_currpmd_orgpm.html"

        OriginalPmd=$(awk '/Original PMD Warnings/{f=1; next} f && /class="stat/{print; exit}' "$pmd_html" 2>/dev/null | sed -n 's/.*>\([0-9][0-9]*\)<.*/\1/p')
        CurrentPmd=$(awk  '/Current PMD Warnings/{f=1; next} f && /class="stat/{print; exit}' "$pmd_html" 2>/dev/null | sed -n 's/.*>\([0-9][0-9]*\)<.*/\1/p')
        OriginalPmd=${OriginalPmd:-0}; CurrentPmd=${CurrentPmd:-0}

        CurrseverityCnt=$(grep -Eh "$pattern" "PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/classes/$currTxt" 2>/dev/null | wc -l | xargs)
        OrgseverityCnt=$(grep -Eh "$pattern" "PMDReport/orgpmdoutput/src/classes/$orgTxt" 2>/dev/null | wc -l | xargs)
        CurrseverityCnt=${CurrseverityCnt:-0}; OrgseverityCnt=${OrgseverityCnt:-0}
        delta=$(( CurrseverityCnt - OrgseverityCnt ))

        class_src="${classePath/changeSetDeploy\/force-app\/main\/default/src}"
        author_name="$(git log -1 --format='%an' "$class_src" 2>/dev/null | head -n1)"
        [ -n "$author_name" ] || author_name="N/A"

        link="https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/${base}.cls_currpmd_orgpm.html"
        display="${base}.cls"

        # Determine row style (added left bar + improvement highlight)
        bg_color="#ffffff"; text_color="${_pmd_text_normal}"; link_color="${_pmd_link_normal}"; delta_weight="normal"; delta_color="${_pmd_text_normal}"; delta_prefix=""
        if [ $((row_num % 2)) -eq 1 ]; then bg_color="#eeeeee"; fi
        row_left="#dcdcdc"
        if [ "$delta" -gt 0 ]; then
          bg_color="#ffdddd"; text_color="${_pmd_text_high}"; link_color="${_pmd_link_high}"; delta_weight="bold"; delta_color="#c62828"; delta_prefix="+"
          row_left="#c62828"
        elif [ "$delta" -lt 0 ]; then
          bg_color="#ecf7ef"; row_left="#2e7d32"
        fi
        
        echo "<tr style=\"background:${bg_color}; border-bottom:1px solid ${_pmd_row_border}; border-left:4px solid ${row_left};\">" >>"$HTMLLog"
        echo "<td style=\"padding:9px 12px; font:12px Arial; color:${text_color}; word-wrap:break-word;\"><a href=\"$link\" style=\"text-decoration:underline; color:${link_color};\">$display</a></td>" >>"$HTMLLog"
        echo "<td align=\"right\" style=\"padding:9px 12px; font:12px Arial; color:${text_color}; white-space:nowrap;\">${OriginalPmd}-(${OrgseverityCnt})</td>" >>"$HTMLLog"
        echo "<td align=\"right\" style=\"padding:9px 12px; font:12px Arial; color:${text_color}; white-space:nowrap;\">${CurrentPmd}-(${CurrseverityCnt})</td>" >>"$HTMLLog"
        echo "<td align=\"right\" style=\"padding:9px 12px;\">" >>"$HTMLLog"
        _delta_pill "$delta" >>"$HTMLLog"
        echo "</td>" >>"$HTMLLog"
        echo "<td style=\"padding:9px 12px; font:12px Arial; color:${text_color};\">$author_name</td>" >>"$HTMLLog"
        echo "</tr>" >>"$HTMLLog"
        row_num=$((row_num + 1))
      done
      echo "</tbody></table>" >>"$HTMLLog"
    fi

    # --- TRIGGERS table only if present ---
    if [ "$TRIGGER_COUNT" -gt 0 ]; then
      echo "<table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"margin-top:16px; border:1px solid ${_pmd_row_border}; border-collapse:collapse;\">" >>"$HTMLLog"
      echo "<thead><tr style=\"background:${_pmd_hdr_bg};\"><th align=\"left\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">TRIGGER NAME</th><th align=\"right\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">ORIGINAL (HIGH)</th><th align=\"right\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">CURRENT (HIGH)</th><th align=\"right\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">Δ HIGH</th><th align=\"left\" style=\"padding:10px 12px; font:bold 11px Arial; color:${_pmd_hdr_text}; border-bottom:1px solid ${_pmd_row_border};\">AUTHOR</th></tr></thead><tbody>" >>"$HTMLLog"
      
      row_num=0
      for triggerPath in $(ls changeSetDeploy/force-app/main/default/triggers/*.trigger 2>/dev/null); do
        tbase="$(basename "$triggerPath" .trigger)"
        currTxt="${tbase}.trigger_currpmd.txt"
        orgTxt="${tbase}.trigger_orgpmd.txt"

        pmd_html="/data/public/pmd_rule/$SFDC_ORG/${tbase}.trigger_currpmd_orgpm.html"
        [ -f "$pmd_html" ] || pmd_html="/data/public/pmd_rule/$SFDC_ORG/${tbase}.trigger_currpmd_orgpm.html"

        OriginalPmd=$(awk '/Original PMD Warnings/{f=1; next} f && /class="stat/{print; exit}' "$pmd_html" 2>/dev/null | sed -n 's/.*>\([0-9][0-9]*\)<.*/\1/p')
        CurrentPmd=$(awk  '/Current PMD Warnings/{f=1; next} f && /class="stat/{print; exit}' "$pmd_html" 2>/dev/null | sed -n 's/.*>\([0-9][0-9]*\)<.*/\1/p')
        OriginalPmd=${OriginalPmd:-0}; CurrentPmd=${CurrentPmd:-0}

        CurrseverityCnt=$(grep -Eh "$pattern" "PMDReport/currentpmdoutput/changeSetDeploy/force-app/main/default/triggers/$currTxt" 2>/dev/null | wc -l | xargs)
        OrgseverityCnt=$(grep -Eh "$pattern" "PMDReport/orgpmdoutput/src/triggers/$orgTxt" 2>/dev/null | wc -l | xargs)
        CurrseverityCnt=${CurrseverityCnt:-0}; OrgseverityCnt=${OrgseverityCnt:-0}
        delta=$(( CurrseverityCnt - OrgseverityCnt ))

        trig_src="${triggerPath/changeSetDeploy\/force-app\/main\/default/src}"
        author_name="$(git log -1 "$trig_src" 2>/dev/null | head -n1)"
        [ -n "$author_name" ] || author_name="N/A"

        link="https://cdnsfdc.cadence.com/pmd_rule/$SFDC_ORG/${tbase}.trigger_currpmd_orgpm.html"
        display="${tbase}.trigger"
        
        # Determine row style (added left bar + improvement highlight)
        bg_color="#ffffff"; text_color="${_pmd_text_normal}"; link_color="${_pmd_link_normal}"; delta_weight="normal"; delta_color="${_pmd_text_normal}"; delta_prefix=""
        if [ $((row_num % 2)) -eq 1 ]; then bg_color="#eeeeee"; fi
        row_left="#dcdcdc"
        if [ "$delta" -gt 0 ]; then
          bg_color="#ffdddd"; text_color="${_pmd_text_high}"; link_color="${_pmd_link_high}"; delta_weight="bold"; delta_color="#c62828"; delta_prefix="+"
          row_left="#c62828"
        elif [ "$delta" -lt 0 ]; then
          bg_color="#ecf7ef"; row_left="#2e7d32"
        fi

        echo "<tr style=\"background:${bg_color}; border-bottom:1px solid ${_pmd_row_border}; border-left:4px solid ${row_left};\">" >>"$HTMLLog"
        echo "<td style=\"padding:9px 12px; font:12px Arial; color:${text_color}; word-wrap:break-word;\"><a href=\"$link\" style=\"text-decoration:underline; color:${link_color};\">$display</a></td>" >>"$HTMLLog"
        echo "<td align=\"right\" style=\"padding:9px 12px; font:12px Arial; color:${text_color}; white-space:nowrap;\">${OriginalPmd}-(${OrgseverityCnt})</td>" >>"$HTMLLog"
        echo "<td align=\"right\" style=\"padding:9px 12px; font:12px Arial; color:${text_color}; white-space:nowrap;\">${CurrentPmd}-(${CurrseverityCnt})</td>" >>"$HTMLLog"
        echo "<td align=\"right\" style=\"padding:9px 12px;\">" >>"$HTMLLog"
        _delta_pill "$delta" >>"$HTMLLog"
        echo "</td>" >>"$HTMLLog"
        echo "<td style=\"padding:9px 12px; font:12px Arial; color:${text_color};\">$author_name</td>" >>"$HTMLLog"
        echo "</tr>" >>"$HTMLLog"
        row_num=$((row_num + 1))
      done
      echo "</tbody></table>" >>"$HTMLLog"
    fi
  fi

  # Success / Failure details
  SAVEIFS=$IFS; IFS=$(echo -en "\n\b")
  if [ "$Report" = "SUCCEEDED" ]; then
    find changeSetDeploy/force-app/main/default -type f \
      | egrep -v "customSettings|staticResourceFolders.txt" \
      | sed 's|^changeSetDeploy/force-app/main/default|src|' | sort -u > "${DEPLOYEDFILE}"
    changesetFile=$(find changeSetDeploy/force-app/main/default -type f | egrep -v "customSettings|staticResourceFolders.txt" | wc -l)
    echo "<table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"margin-top:8px;\"><tr><td style=\"font:bold 13px Arial;color:${_succ_title};padding:4px;\">Changeset file/s ...[${changesetFile}]</td></tr></table>" >>"$HTMLLog"
    NUM=1
    while read -r FILE; do
      [ "$FILE" = "src/labels/CustomLabels.labels-meta.xml" ] && FILE="src/env/${SFDC_ORG}/customLabel/CustomLabels.labels-meta.xml"
      if echo "$FILE" | grep -q "^customSettings"; then FILE=$(echo "$FILE" | sed -e 's/^customSettings\///'); fi
      [[ "$FILE" =~ "src/remoteSiteSettings/" ]] && FILE=$(echo "$FILE" | sed -e "s/^src/src\/env\/${SFDC_ORG}/")
      [[ "$FILE" =~ "src/customMetadata/"    ]] && FILE=$(echo "$FILE" | sed -e "s/^src/src\/env\/${SFDC_ORG}/")
      echo "<table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"margin-top:6px;\">
              <tr><td style=\"background:${_succ_file_bg};padding:6px 8px;border:1px solid ${_succ_file_border};\"><pre style=\"margin:0;white-space:pre-wrap;word-wrap:break-word;\">[$((NUM++))] ${FILE}</pre></td></tr>
              <tr><td style=\"background:${_succ_auth_bg};padding:6px 8px;border-left:1px solid ${_succ_auth_border};border-right:1px solid ${_succ_auth_border};border-bottom:1px solid ${_succ_auth_border};\"><pre style=\"margin:0;white-space:pre-wrap;word-wrap:break-word;\">Last author... $(git log -1 "$FILE" | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g')</pre></td></tr>
            </table>" >>"$HTMLLog"
    done < "${DEPLOYEDFILE}"
  else
    echo "<table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"margin-top:8px;\"><tr><td style=\"font:bold 13px Arial;color:${_fail_title};padding:4px;\">All Component Failures:</td></tr></table>" >>"$HTMLLog"
    i=1
    if [ -f "$LOG.filtered" ]; then
      for failure in $(jq -c '.result.details.componentFailures[]' "$LOG.filtered"); do
        fileName=$(echo "$failure" | jq -r '.fileName')
        fileDisp=$(echo "$fileName" | sed 's|^changeSetDeploy/force-app/main/default/||')
        errorMsg=$(echo "$failure" | jq -r '.problem' | tr '\n' ' ' | tr '\r' ' ' | sed -e 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
        echo "<table role=\"presentation\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"margin-top:6px;\"><tr><td style=\"background:${_fail_err_bg};padding:6px 8px;border:1px solid ${_fail_err_border};\"><pre style=\"margin:0;white-space:pre-wrap;word-wrap:break-word;\">$i. $fileDisp -- Error: $errorMsg</pre></td></tr>" >>"$HTMLLog"

        # robust resolution to src path (so author log shows even when failing)
        gitFile="$(resolve_src_from_json_name "$fileName")"
        if [ -n "$gitFile" ]; then
          LastAuthor=$(git log -1 "$gitFile" 2>/dev/null | sed -e 's/$/\ |/g' | xargs | sed -e 's/| |/|\ Comment:/g')
          echo "<tr><td style=\"background:${_succ_auth_bg};padding:6px 8px;border-left:1px solid ${_succ_auth_border};border-right:1px solid ${_succ_auth_border};border-bottom:1px solid ${_succ_auth_border};\"><pre style=\"margin:0;white-space:pre-wrap;word-wrap:break-word;\">GIT log >>> $gitFile
$LastAuthor</pre></td></tr></table>" >>"$HTMLLog"
        else
          echo "<tr><td style=\"background:${_succ_auth_bg};padding:6px 8px;border-left:1px solid ${_succ_auth_border};border-right:1px solid ${_succ_auth_border};border-bottom:1px solid ${_succ_auth_border};\"><pre style=\"margin:0;white-space:pre-wrap;word-wrap:break-word;\">No Git log available for $fileDisp</pre></td></tr></table>" >>"$HTMLLog"
        fi
        i=$((i+1))
      done
    fi
  fi
  IFS=$SAVEIFS

  # Footer & close
  cat >>"$HTMLLog" <<EOF
    </td></tr></table>
    <table role="presentation" cellpadding="0" cellspacing="0" border="0" width="1100" style="max-width:1100px;margin:8px auto 14px;background:${_foot_bg};">
      <tr><td style=\"padding:6px 8px;text-align:center;color:${_foot_text};font:bold 12px Arial;line-height:16px;">End of Report</td></tr>
    </table>
</td></tr></table>
</body></html>
EOF

  # Send
  EMAIL=${FROM} mutt -e 'set content_type=text/html' \
    -s "---${SFDC_ORG}--- SF-CLI ChangeSet Deploy ${Report} [`TZ=IST date +%d.%b.%Y` IST - git ${gitlast}-${gitlatest} ]" "${mutt_MAIL_LIST}" < "$HTMLLog"

  # Debug line for PMD parsing
  echo "DEBUG PMD: classCnt=${CLASS_COUNT} trigCnt=${TRIGGER_COUNT} highCls=${PMD_HIGH_CLS} highTrg=${PMD_HIGH_TRG} totalHigh=${PMD_HIGH_TOTAL}" >>"$LOG"

  # Cleanup
  rm -f "$UI_COLORS_JSON_STRICT" 2>/dev/null
}
